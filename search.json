[{"path":"https://docs.ropensci.org/datapack/articles/datapack-overview.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"datapack R Package Overview","text":"datapack R package provides abstraction collating multiple data objects different types metadata describing objects bundle can transported loaded using single composite file. primarily meant container bundle together files transport DataONE data repositories. methods package provide convenient way load data common repositories DataONE R environment, document, serialize, save data R data repositories.","code":""},{"path":"https://docs.ropensci.org/datapack/articles/datapack-overview.html","id":"create-a-single-object","dir":"Articles","previous_headings":"","what":"Create a Single Object","title":"datapack R Package Overview","text":"datapack DataObject class wrapper contains data system metadata describes data. data can either R raw data data file, example CSV file. system metadata includes attributes object identifier, type, size, checksum, owner, version relationship objects, access rules, critical metadata. DataObject class also holds additional metadata data file. example, file go package downloaded. often times filepath however, care taken include drive letters unnecessary folders. following example shows create DataObject locally CSV file: DataObject myObj now contains CSV data well system-level information describing file, identifier, type, checksum. getData method can used extract data content DataObject. Using example DataObject: raw data can converted back CSV format using R commands: Alternatively, CSV data converted data frame using standard R functions: data another format CSV, PNG, JPEG, NetCDF, corresponding R packages used handle object. DataObject identifier can used refer object, meant globally unique can used data repositories DataONE federation. retrieve identifier associated DataObject: case, identifier created UUID format, identifiers DOIs (Digital Object Identifers) can also used. object also associated specific format. retrieve format type:","code":"library(datapack) library(uuid) csvfile <- system.file(\"extdata/sample-data.csv\", package=\"datapack\") myId <- paste(\"urn:uuid:\", UUIDgenerate(), sep=\"\") myObj <- new(\"DataObject\", id=myId, format=\"text/csv\", filename=csvfile, targetPath=\"extdata/sample-data.csv\") rawData <- getData(myObj) tf <- tempfile(fileext=\".csv\") write.csv(rawToChar(rawData), tf, quote=F, row.names=F) df <- read.csv(textConnection(rawToChar(rawData))) head(df) ##             Species_Name light temp cont moist react nutr ## 1  Achillea millefolium      8    0    0     4     0    5 ## 2 Achillea tanacetifolia     0    0    0     0     0    0 ## 3    Aconitum lycoctonum     3    4    4     7     7    8 ## 4    Aconitum variegatum     5    4    4     7     8    7 ## 5         Actaea spicata     3    5    4     5     6    7 ## 6  Aegopodium podagraria     5    5    3     6     7    8 getIdentifier(myObj) ## [1] \"urn:uuid:b7788262-177a-4ddf-89c2-1198a245c6e4\" getFormatId(myObj) ## [1] \"text/csv\""},{"path":"https://docs.ropensci.org/datapack/articles/datapack-overview.html","id":"system-metadata","dir":"Articles","previous_headings":"Create a Single Object","what":"System Metadata","title":"datapack R Package Overview","text":"system metadata information DataObject can accessed directly SystemMetadata object contained DataObject. access fileName field, example: system metadata contains access policy information DataObject used data repository object uploaded . example, DataObject uploaded DataONE Member Node, access policy applied uploaded data controls access data Member Node DataONE users.","code":"myObj@sysmeta@fileName ## [1] \"sample-data.csv\""},{"path":"https://docs.ropensci.org/datapack/articles/datapack-overview.html","id":"access-policy","dir":"Articles","previous_headings":"Create a Single Object > System Metadata","what":"Access Policy","title":"datapack R Package Overview","text":"DataObject uploaded, access can set anyone can read uploaded data: Individual access rules can also added one time. access rules expressed using unique identifier individual, ORCID identity, whatever form repository supports. permissions can set include: read: permission read data repository write: permission perform update operations data changePermission: permission control access data repository Alternatively, multiple access rules can added: dataone R package can used upload download DataObjects DataONE Member Node. Please see web page dataone R package vignettes information:","code":"myObj <- setPublicAccess(myObj) myObj@sysmeta@accessPolicy ##   subject permission ## 1  public       read myObj <- addAccessRule(myObj, \"https://orcid.org/0000-0003-0077-4738\", \"write\") myObj@sysmeta@accessPolicy ##                                 subject permission ## 1                                public       read ## 2 https://orcid.org/0000-0003-0077-4738      write accessRules <- data.frame(subject=c(\"uid=jsmith,o=Account,dc=example,dc=com\",                                       \"uid=jadams,o=Account,dc=example,dc=org\"),                            permission=c(\"write\", \"changePermission\")) myObj <- addAccessRule(myObj, accessRules) myObj@sysmeta@accessPolicy ##                                  subject       permission ## 1                                 public             read ## 2  https://orcid.org/0000-0003-0077-4738            write ## 3 uid=jsmith,o=Account,dc=example,dc=com            write ## 4 uid=jadams,o=Account,dc=example,dc=org changePermission library(dataone) vignette(\"download-data\", package=\"dataone\") vignette(\"upload-data\", package=\"dataone\")"},{"path":"https://docs.ropensci.org/datapack/articles/datapack-overview.html","id":"create-a-collection-of-objects","dir":"Articles","previous_headings":"","what":"Create a Collection of Objects","title":"datapack R Package Overview","text":"DataPackage container set DataObjects. DataObject class proxy data type, including traditional data like CSV, tabular data, spatial rasters, also non-traditional objects like derived data, figures, scripts R Python. collection related DataObjects can placed DataPackage actions can performed , serializing entire collection objects package file, uploading package member objects data repository. Figure 1. diagram typical DataPackage showing metadata file describes, documents data granules package contains.  example creates DataPackage one DataObject containing metadata two others containing science data. First individual objects created: identifier values used example simple easily recognizable demonstration purposes. standard unique identifier can created uuid::UUIDgenerate() function: Next DataPackage created DataObjects added . Note mo argument addMember function adding data file. Including argument specifies metadata object documents data object. information relationships DataObjects included next section. Information can also extracted DataPackage. show identifiers DataObjects package: show number DataObjects package: extract data DataObject raw data, ask data using identifier DataObject: get access full instance DataObject class representing data object, use datapack::getMember function pass identifier desired object, return instance DataObject class:","code":"metadataFile <- system.file(\"extdata/sample-eml.xml\", package=\"datapack\") metadataId <- \"metadataId\" metadataObj <- new(\"DataObject\", id=metadataId, format=\"eml://ecoinformatics.org/eml-2.1.0\", file=metadataFile)  csvfile <- system.file(\"extdata/sample-data.csv\", package=\"datapack\") sciId <- \"sciId1\" sciObj <- new(\"DataObject\", id=sciId, format=\"text/csv\", filename=csvfile)  outFile <- system.file(\"extdata/sample-data-filtered.csv\", package=\"datapack\") sciId2 <- \"sciId2\" sciObj2 <- new(\"DataObject\", id=sciId2, filename=outFile, format=\"text/csv\") myid <- paste(\"urn:uuid:\", UUIDgenerate(), sep=\"\") myid ## [1] \"urn:uuid:829d8ced-a1fd-4741-a5fe-a4f6ece109e2\" dp <- new(\"DataPackage\") dp <- addMember(dp, do = metadataObj) dp <- addMember(dp, do = sciObj, mo = metadataObj) # The second object will be added in the next section getIdentifiers(dp) ## [1] \"metadataId\" \"sciId1\" getSize(dp) ## [1] 2 sciObjRaw <- getData(dp, sciId) mySciObj <- getMember(dp, sciId)"},{"path":"https://docs.ropensci.org/datapack/articles/datapack-overview.html","id":"relationships-between-dataobjects","dir":"Articles","previous_headings":"","what":"Relationships Between DataObjects","title":"datapack R Package Overview","text":"relationships DataObjects DataPackage can recorded DataPackage. example, typical relationship DataObject containing metadata document domain specific format Ecological Metadata Language (EML) ISO19139 geospatial metadata can describe, document, DataObjects containing associated science data. Adding relationship information data package members may assist consumer package better understanding contents package make use package. DataPackage can record type relationships important community, provided functions establish common relationships needed understand scientific data DataONE federation. include following typical provenance properties: cito:documents: establishing metadata document provides descriptive information one associated data objects prov:wasDerivedFrom: asserting derived data object created using data one source data objects prov:used: asserting program (R script) executed used one source data objects inputs prov:wasGeneratedBy: asserting program (R script) executed generated one derived data objects outputs Figure 2. DataPackage provenance relationships.","code":""},{"path":"https://docs.ropensci.org/datapack/articles/datapack-overview.html","id":"linking-a-metadata-file-with-one-or-more-data-files-using-citodocuments","dir":"Articles","previous_headings":"Relationships Between DataObjects","what":"Linking a metadata file with one or more data files using cito:documents","title":"datapack R Package Overview","text":"mentioned , fastest way add cito:documents relationship include metadata object science data object added package: example, sciObj2 DataObject added package using addMember call, metadata object metadataObj passed function well. tells DataPackage metadataId cito:documents sciId2. cito:documents relationship defined Citation Typing Ontology (CITO)).","code":"dp <- addMember(dp, do = sciObj2, mo = metadataObj) getRelationships(dp, condense=TRUE) ##                   subject           predicate                  object ## 4 sample-dat...ltered.csv cito:isDocumentedBy          sample-eml.xml ## 2         sample-data.csv cito:isDocumentedBy          sample-eml.xml ## 1          sample-eml.xml      cito:documents         sample-data.csv ## 3          sample-eml.xml      cito:documents sample-dat...ltered.csv"},{"path":"https://docs.ropensci.org/datapack/articles/datapack-overview.html","id":"asserting-data-provenance-relationships-between-objects","dir":"Articles","previous_headings":"","what":"Asserting data provenance relationships between objects","title":"datapack R Package Overview","text":"Relationships describe processing history package members can added. example, program performs modeling calculation might read one source data files inputs, perform calculation based data read, write data graphics file characterizing results model run. datapack package uses ProvONE data model represent provenance relationships. following example demonstrates insert provenance relationships DataPackage R program logit-regression.R reads source data file binary.csv generates derived image file gre-predicted.png. Using example DataPackage DataObjects program input output already added, create DataObject program, call describeWorkflow add necessary provenance relationships:  Note example, R script previously run generated image file describeWorkflow() called. sources derivations arguments describeWorkflow() can lists either DataObjects identifiers DataObjects.","code":"dp <- new(\"DataPackage\")  metadataFile <- system.file(\"extdata/sample-eml.xml\", package=\"datapack\") metadataId <- \"metadataId\" metadataObj <- new(\"DataObject\", id=metadataId, format=\"eml://ecoinformatics.org/eml-2.1.0\", file=metadataFile)  # This DataObject contains the program script that was executed progObj <- new(\"DataObject\", format=\"application/R\",             filename=system.file(\"extdata/pkg-example/logit-regression-example.R\", package=\"datapack\")) dp <- addMember(dp, progObj, mo = metadataObj)  doIn <- new(\"DataObject\", format=\"text/csv\",               filename=system.file(\"./extdata/pkg-example/binary.csv\", package=\"datapack\")) dp <- addMember(dp, doIn, mo = metadataObj)  doOut <- new(\"DataObject\", format=\"image/png\",               filename=system.file(\"./extdata/pkg-example/gre-predicted.png\", package=\"datapack\")) dp <- addMember(dp, doOut, mo = metadataObj)  # The arguments \"sources\" and \"derivations\" can also contain lists of \"DataObjects\" dp <- describeWorkflow(dp, sources=doIn, program=progObj, derivations=doOut)   rels <- getRelationships(dp, condense=TRUE) rels[grepl(\"prov:\", rels$predicate),] ##                    subject               predicate                  object ## 11 _1eb3c1e5-...7cf531e289            prov:hadPlan logit-regr...-example.R ## 17       gre-predicted.png     prov:wasDerivedFrom              binary.csv ## 16       gre-predicted.png     prov:wasGeneratedBy urn:uuid:3...b1bc57b355 ## 9  urn:uuid:3...b1bc57b355 prov:quali...ssociation _1eb3c1e5-...7cf531e289 ## 15 urn:uuid:3...b1bc57b355               prov:used              binary.csv library(igraph) plotRelationships(dp)"},{"path":"https://docs.ropensci.org/datapack/articles/datapack-overview.html","id":"inserting-other-arbitrary-relationships","dir":"Articles","previous_headings":"Asserting data provenance relationships between objects","what":"Inserting other (arbitrary) relationships","title":"datapack R Package Overview","text":"types relationships DataPackage member DataObjects can recorded insertRelationship method. main requirement relationship described needs unique URI drawn controlled vocabulary like Citation Typing Ontology described . cito:documents relationship default used insertRelationship, relationship type doesn’t need specified case. example, example DataPackage created , can add cito:documents relationship: Relationships can fully specified using URI concept, shown following statement adds provenance relationship two objects example package: relationships contained DataPackage conform Resource Description Framework (RDF), World Wide Web Consortium standard describing web accessible resources.","code":"dp <- insertRelationship(dp, subjectID=metadataId, objectIDs=sciId) relations <- getRelationships(dp, condense=TRUE) relations[grepl(\"cito:documents\", relations$predicate),] ##           subject      predicate                  object ## 18 sample-eml.xml cito:documents                  sciId1 ## 5  sample-eml.xml cito:documents       gre-predicted.png ## 1  sample-eml.xml cito:documents logit-regr...-example.R ## 3  sample-eml.xml cito:documents              binary.csv dp <- insertRelationship(dp, subjectID=sciId2, objectIDs=sciId,                    predicate=\"https://www.w3.org/ns/prov#wasDerivedFrom\") relations <- getRelationships(dp, condense=TRUE) relations[grepl(\"prov:wasDerivedFrom\", relations$predicate),]"},{"path":"https://docs.ropensci.org/datapack/articles/datapack-overview.html","id":"describing-the-contents-of-a-datapackage","dir":"Articles","previous_headings":"","what":"Describing The Contents of a DataPackage","title":"datapack R Package Overview","text":"order transport DataPackage, example data repository, description contents DataPackage created consumer DataPackage can determine extract process contents. DataPackage can produce standard description members relationships conforms Open Archives Initiative Object Reuse Exchange (OAI-ORE) specification, widely used standard describe aggregations web accessible resources. OAI-ORE description referred resource map. serializePackage method create Resource Description Framework serialization resource map, written file case, conforms OAI-ORE specification. create resource map example DataPackage: example writes tempfile using default serialization format “rdfxml”. Also URLs package member prepended default value DataONE resolve service, URL used access data object package uploaded DataONE member node. different value prepended identifier can specified resoveURI argument. specify value prepended identifier URLs, specify zero-length character: also possible create JSON serialization, desired:","code":"tf <- tempfile() packageId <- paste(\"urn:uuid:\", UUIDgenerate(), sep=\"\") serializePackage(dp, file=tf, id=packageId) tf <- tempfile() packageId <- paste(\"urn:uuid:\", UUIDgenerate(), sep=\"\") serializePackage(dp, file=tf, id=packageId, resolveURI=\"\") tf <- tempfile() packageId <- paste(\"urn:uuid:\", UUIDgenerate(), sep=\"\") serializePackage(dp, file=tf, id=packageId, syntaxName=\"json\", mimeType=\"application/json\", resolveURI=\"\")"},{"path":"https://docs.ropensci.org/datapack/articles/datapack-overview.html","id":"saving-datapackage-contents-to-a-file","dir":"Articles","previous_headings":"","what":"Saving DataPackage Contents to a File","title":"datapack R Package Overview","text":"contents DataPackage can saved file using serializeToBagIt method. creates BagIt file, hierarchical file packaging format. created BagIt file contains data DataPackage members well OAI-ORE resource map automatically created serializeToBagIt. following R command shows create BagIt file example DataPackage: variable bagitFilename contains file path temporary BagIt file. file copied another location quitting restarting R: serialized BagIt version file excellent way transport files metadata DataPackage data repository collaborator.","code":"bagitFilename <- serializeToBagIt(dp) file.copy(bagitFilename, \"~/myPackageFile.zip\")"},{"path":"https://docs.ropensci.org/datapack/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew B. Jones. Author, maintainer. Peter Slaughter. Author. S. Jeanette Clark. Contributor. Regents University California. Copyright holder.","code":""},{"path":"https://docs.ropensci.org/datapack/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jones M, Slaughter P (2022). datapack: Flexible Container Transport Manipulate Data Associated Resources. doi:10.5063/F1QV3JGM, R package version 1.4.1, https://github.com/ropensci/datapack.","code":"@Manual{,   title = {{datapack}: A Flexible Container to Transport and Manipulate Data and Associated Resources},   author = {Matthew B. Jones and Peter Slaughter},   year = {2022},   note = {R package version 1.4.1},   url = {https://github.com/ropensci/datapack},   doi = {10.5063/F1QV3JGM}, }"},{"path":"https://docs.ropensci.org/datapack/index.html","id":"datapack-a-flexible-container-to-transport-and-manipulate-data-and-associated-resources","dir":"","previous_headings":"","what":"datapack: A Flexible Container to Transport and Manipulate Data and Associated Resources","title":"A Flexible Container to Transport and Manipulate Data and Associated\n    Resources","text":"Author: Matthew B. Jones Peter Slaughter S. Jeanette Clark (NCEAS) doi:10.5063/F1QV3JGM License: Apache 2 Package source code Github Submit Bugs feature requests datapack R package provides abstraction collating heterogeneous collections data objects metadata bundle can transported loaded single composite file. methods package provide convenient way load data common repositories DataONE R environment, document, serialize, save data R data repositories worldwide. Note package (‘datapack’) related similarly named rOpenSci package ‘DataPackageR’. Documentation DataPackageR github repository states “DataPackageR used reproducibly process raw data packaged, analysis-ready data sets.”","code":""},{"path":"https://docs.ropensci.org/datapack/index.html","id":"installation-notes","dir":"","previous_headings":"","what":"Installation Notes","title":"A Flexible Container to Transport and Manipulate Data and Associated\n    Resources","text":"datapack R package requires R package redland. installing Ubuntu Redland C libraries must installed redland datapack package can installed. installing Mac OS X Windows installing libraries required. following instructions illustrate install datapack requirements.","code":""},{"path":"https://docs.ropensci.org/datapack/index.html","id":"installing-on-mac-os-x","dir":"","previous_headings":"Installation Notes","what":"Installing on Mac OS X","title":"A Flexible Container to Transport and Manipulate Data and Associated\n    Resources","text":"Mac OS X datapack can installed following commands: datapack R package available use point. Note: wish build required redland package source installing datapack, please see redland installation instructions.","code":"install.packages(\"datapack\") library(datapack)"},{"path":"https://docs.ropensci.org/datapack/index.html","id":"installing-on-ubuntu","dir":"","previous_headings":"","what":"Installing on Ubuntu","title":"A Flexible Container to Transport and Manipulate Data and Associated\n    Resources","text":"Ubuntu, install required Redland C libraries entering following commands terminal window: install R packages R console: datapack R package available use point","code":"sudo apt-get update sudo apt-get install librdf0 librdf0-dev install.packages(\"datapack\") library(datapack)"},{"path":"https://docs.ropensci.org/datapack/index.html","id":"installing-on-windows","dir":"","previous_headings":"","what":"Installing on Windows","title":"A Flexible Container to Transport and Manipulate Data and Associated\n    Resources","text":"windows, required redland R package distributed binary release, necessary install additional system libraries. install R packages R console:","code":"install.packages(\"datapack\") library(datapack)"},{"path":"https://docs.ropensci.org/datapack/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"A Flexible Container to Transport and Manipulate Data and Associated\n    Resources","text":"See full manual documentation, installed, package can run R using: Create DataPackage add metadata data DataObjects : Add relationship DataPackage shows metadata describes, “documents”, science data: Create Resource Description Framework representation relationships package: Save DataPackage file, using BagIt packaging format: Note dataone R package can used upload DataPackage DataONE Member Node using uploadDataPackage method. Please see documentation dataone R package, example:","code":"library(datapack) help(\"datapack\") library(datapack) library(uuid) dp <- new(\"DataPackage\") mdFile <- system.file(\"extdata/sample-eml.xml\", package=\"datapack\") mdId <- paste(\"urn:uuid:\", UUIDgenerate(), sep=\"\") md <- new(\"DataObject\", id=mdId, format=\"eml://ecoinformatics.org/eml-2.1.0\", file=mdFile) addData(dp, md)  csvfile <- system.file(\"extdata/sample-data.csv\", package=\"datapack\") sciId <- paste(\"urn:uuid:\", UUIDgenerate(), sep=\"\") sciObj <- new(\"DataObject\", id=sciId, format=\"text/csv\", filename=csvfile) dp <- addData(dp, sciObj) ids <- getIdentifiers(dp) dp <- insertRelationship(dp, subjectID=mdId, objectIDs=sciId) relations <- getRelationships(dp) serializationId <- paste(\"resourceMap\", UUIDgenerate(), sep=\"\") filePath <- file.path(sprintf(\"%s/%s.rdf\", tempdir(), serializationId)) status <- serializePackage(dp, filePath, id=serializationId, resolveURI=\"\") bagitFile <- serializeToBagIt(dp) vignette(\"upload-data\", package=\"dataone\")"},{"path":"https://docs.ropensci.org/datapack/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"A Flexible Container to Transport and Manipulate Data and Associated\n    Resources","text":"Work package supported : NSF-ABI grant #1262458 C. Gries, M. B. Jones, S. Collins. NSF-DATANET grants #0830944 #1430508 W. Michener, M. B. Jones, D. Vieglais, S. Allard P. Cruse NSF DIBBS grant #1443062 T. Habermann M. B. Jones NSF-PLR grant #1546024 M. B. Jones, S. Baker-Yeboah, J. Dozier, M. Schildhauer, . Budden NSF-PLR grant #2042102 M. B. Jones, . Budden, J. Dozier, M. Schildhauer Additional support provided working group collaboration National Center Ecological Analysis Synthesis, Center funded University California, Santa Barbara, State California.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/DataObject-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DataObject wraps raw data with system-level metadata — DataObject-class","title":"DataObject wraps raw data with system-level metadata — DataObject-class","text":"DataObject wrapper class associates raw data data file system-level metadata  describing data.  system metadata includes attributes object's identifier,  type, size, checksum, owner, version relationship objects, access rules, critical metadata. SystemMetadata compliant DataONE federated repository network's definition SystemMetadata, encapsulated separate object type SystemMetadata can manipulated needed. Additional science-level domain-specific metadata --scope SystemMetadata, intended critical metadata managing objects repository system.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/DataObject-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DataObject wraps raw data with system-level metadata — DataObject-class","text":"DataObject can constructed passing data SystemMetadata new() method, passing identifier, data, format, user, DataONE node identifier, case SystemMetadata instance generated fields others calculated (size checksum). Data associated DataObject either passing 'raw' value 'dataobj' parameter constructor, stored memory, passing fully qualified file path  data 'filename' parameter, stored disk.  One dataobj filename required. Use 'filename' approach data large managed effectively memory.  Callers can access 'filename' slot get direct access file, can call 'getData()' retrieve contents data file raw value (read data memory).","code":""},{"path":"https://docs.ropensci.org/datapack/reference/DataObject-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"DataObject wraps raw data with system-level metadata — DataObject-class","text":"sysmeta value type \"SystemMetadata\", containing metadata object data value type \"raw\", containing data represented object filename character value contains fully-qualified path object data disk dataURL character value URL used load data DataObject updated list containing logical values indicate system metadata data object updated since object creation. oldId character string containing previous identifier used, \"replaceMember\" call. targetPath optional character string holding path file placed downloaded package.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/DataObject-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"DataObject wraps raw data with system-level metadata — DataObject-class","text":"initialize: Initialize DataObject addAccessRule: Add Rule AccessPolicy canRead: Test whether provided subject can read object. getData: Get data content specified data object getFormatId: Get FormatId DataObject getIdentifier: Get Identifier DataObject hasAccessRule: Determine access rules exists DataObject. setPublicAccess: Add Rule AccessPolicy make object publicly readable. updateXML: Update selected elements xml content DataObject","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/DataObject-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DataObject wraps raw data with system-level metadata — DataObject-class","text":"","code":"data <- charToRaw(\"1,2,3\\n4,5,6\\n\") targetPath <- \"myData/time-trials/trial_data.csv\" do <- new(\"DataObject\", \"id1\", dataobj=data, \"text/csv\",    \"uid=jones,DC=example,DC=com\", \"urn:node:KNB\", targetPath=targetPath) getIdentifier(do) #> [1] \"id1\" getFormatId(do) #> [1] \"text/csv\" getData(do) #>  [1] 31 2c 32 2c 33 0a 34 2c 35 2c 36 0a canRead(do, \"uid=anybody,DC=example,DC=com\") #> [1] FALSE do <- setPublicAccess(do) canRead(do, \"public\") #> [1] TRUE canRead(do, \"uid=anybody,DC=example,DC=com\") #> [1] TRUE # Also can create using a file for storage, rather than memory if (FALSE) { tf <- tempfile() con <- file(tf, \"wb\") writeBin(data, con) close(con) targetPath <- \"myData/time-trials/trial_data.csv\" do <- new(\"DataObject\", \"id1\", format=\"text/csv\", user=\"uid=jones,DC=example,DC=com\",    mnNodeId=\"urn:node:KNB\", filename=tf, targetPath=targetPath) }"},{"path":"https://docs.ropensci.org/datapack/reference/DataObject-initialize.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a DataObject — initialize,DataObject-method","title":"Initialize a DataObject — initialize,DataObject-method","text":"initializing DataObject using passed data, one can either pass  'id' param 'SystemMetadata' object, 'character' string  representing identifier object along parameters format, user,associated member node. 'data' missing, 'data' param holds 'raw' data.  Otherwise, 'filename' parameter must provided, points file containing bytes data.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/DataObject-initialize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a DataObject — initialize,DataObject-method","text":"","code":"# S4 method for DataObject initialize(   .Object,   id = NA_character_,   dataobj = NA,   format = NA_character_,   user = NA_character_,   mnNodeId = NA_character_,   filename = NA_character_,   seriesId = NA_character_,   mediaType = NA_character_,   mediaTypeProperty = list(),   dataURL = NA_character_,   targetPath = NA_character_,   checksumAlgorithm = \"SHA-256\" )"},{"path":"https://docs.ropensci.org/datapack/reference/DataObject-initialize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a DataObject — initialize,DataObject-method","text":".Object DataObject instance initialized id identifier DataObject, unique within repository. Optionally can existing SystemMetadata object dataobj bytes data object 'raw' format, optional 'filename' provided format format identifier object, e.g.\"text/csv\", \"eml://ecoinformatics.org/eml-2.1.1\" user identity user owning package, typically X.509 format mnNodeId node identifier repository object belongs. filename filename fully qualified path data disk, optional 'data' provided seriesId unique string identifier latest multiple revisions object. mediaType specified, indicates IANA Media Type (aka MIME-Type) object. value include media type subtype (e.g. text/csv). mediaTypeProperty list, indicates IANA Media Type properties associated parameter \"mediaType\" dataURL character string containing URL remote data (repository) DataObject represents. targetPath optional string denotes file go downloaded package checksumAlgorithm character string specifying checksum algorithm use","code":""},{"path":"https://docs.ropensci.org/datapack/reference/DataObject-initialize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize a DataObject — initialize,DataObject-method","text":"filesystem storage used data associated DataObject, care must taken modify remove file R via facilities DataObject exists R session. Changes object detected result unexpected results. Also, 'dataobj' parameter used specify data source, 'filename' argument may also specified, case  value 'filename' parameter used tell DataONE filename create file downloaded repository.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/DataObject-initialize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a DataObject — initialize,DataObject-method","text":"","code":"data <- charToRaw(\"1,2,3\\n4,5,6\\n\") do <- new(\"DataObject\", \"id1\", dataobj=data, \"text/csv\",    \"uid=jones,DC=example,DC=com\", \"urn:node:KNB\", targetPath=\"data/rasters/data.tiff\")"},{"path":"https://docs.ropensci.org/datapack/reference/DataPackage-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A class representing a data package — DataPackage-class","title":"A class representing a data package — DataPackage-class","text":"DataPackage class provides methods adding extracting data objects data package. contents data package can include arbitrary types objects, including data files, program code, visualizations images, animations, type file. DataPackage class stores individual members data package along key system-level metadata object, including size, checksum, identifier, key information needed effectively archive members package.  addition, DataPackage class can include key provenance metadata relationships among objects data package.  example, data package can document one object provides documentation another (cito:documents), one object derived another (prov:wasDerivedFrom) executing program  used source data (prov:used) create derived data object  prov:wasGeneratedBy.  relationships integral data package, can visualized programs understand ProvONE provenance  model (see https://purl.dataone.org/provone-v1-dev). DataPackage class R representation underlying Open Archives  Initiative ORE model (Object Reuse Exchange;  see https://www.openarchives.org/ore/), follows DataONE Data Packaging model (see https://releases.dataone.org/online/api-documentation-v2.0.1/design/DataPackage.html).","code":""},{"path":"https://docs.ropensci.org/datapack/reference/DataPackage-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A class representing a data package — DataPackage-class","text":"relations list containing provenance relationships package objects objects list containing identifiers objects DataPackage sysmeta SystemMetadata class instance describing package externalIds list containing identifiers objects associated DataPackage resmapId character string specifying identifier package resource map.  assigned package uploaded downloaded repository.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/DataPackage-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"A class representing a data package — DataPackage-class","text":"initialize: Initialize DataPackage object. addAccessRule: Add access rules DataObjects DataPackage. addMember: Add DataObject DataPackage. clearAccessPolicy: Clear access policies DataObjects DataPackage. containsId: Returns true specified object member data package. describeWorkflow: Add data derivation information DataPackage. getData: Get data content specified data object. getSize: Get Count Objects DataPackage. getIdentifiers: Get Identifiers DataPackage members. getMember: Return DataPackage Member Identifier. getRelationships: Retrieve relationships data package objects. getValue: Get values selected DataPackage members. hasAccessRule: Determine access rules exists DataObjects DataPackage. insertRelationship: Insert relationships objects DataPackage. removeAccessRule: Remove access rule DataObject DataPackage. removeMember: Remove specified DataObject DataPackage. removeRelationships: Remove relationships objects DataPackage. replaceMember: Replace raw data file associated DataObject. selectMember: Select package members based slot values. serializePackage: Create OAI-ORE resource map DataPackage. serializeToBagIt: Serialize DataPackage BagIt Archive File. setPublicAccess: Set access policy readable anyone DataObject DataPackage. setValue: Set values selected DataPackage members show: Print DataPackage information formatted view. updateMetadata: Update selected elements XML content DataObject DataPackage updateRelationships: Update package relationships replacing old identifier new one.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/DataPackage-initialize.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a DataPackage object. — initialize,DataPackage-method","title":"Initialize a DataPackage object. — initialize,DataPackage-method","text":"Initialize DataPackage object.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/DataPackage-initialize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a DataPackage object. — initialize,DataPackage-method","text":"","code":"# S4 method for DataPackage initialize(.Object, packageId)"},{"path":"https://docs.ropensci.org/datapack/reference/DataPackage-initialize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a DataPackage object. — initialize,DataPackage-method","text":".Object object initialized packageId package id assign package","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/DataPackage-initialize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a DataPackage object. — initialize,DataPackage-method","text":"","code":"# Create a DataPackage with undefined package id (to be set manually later) pkg <- new(\"DataPackage\") # Alternatively, manually assign the package id when the DataPackage object is created pkg <- new(\"DataPackage\", \"urn:uuid:4f953288-f593-49a1-adc2-5881f815e946\")"},{"path":"https://docs.ropensci.org/datapack/reference/ResourceMap-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ResourceMap provides methods to create, serialize and deserialize an OAI ORE resource map. — ResourceMap-class","title":"ResourceMap provides methods to create, serialize and deserialize an OAI ORE resource map. — ResourceMap-class","text":"Open Archives Initiative Object Reuse Exchange (OAI-ORE) defines standards description exchange aggregations web resources, DataPackage. Resource Map describes objects DataPackage relationships objects.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/ResourceMap-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ResourceMap provides methods to create, serialize and deserialize an OAI ORE resource map. — ResourceMap-class","text":"relations value type \"data.frame\", containing RDF triples representing relationship package objects world Redland RDF World object storage Redland RDF Storage object model Redland RDF Model object id unique identifier ResourceMap instance","code":""},{"path":"https://docs.ropensci.org/datapack/reference/ResourceMap-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"ResourceMap provides methods to create, serialize and deserialize an OAI ORE resource map. — ResourceMap-class","text":"initialize: Initialize ResourceMap object. createFromTriples: Populate ResourceMap RDF relationships data.frame. getTriples: Get RDF relationships stored ResourceMap. parseRDF: Parse RDF/XML resource map file. serializeRDF: Write ResourceMap relationships file.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/ResourceMap-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ResourceMap provides methods to create, serialize and deserialize an OAI ORE resource map. — ResourceMap-class","text":"","code":"dp <- new(\"DataPackage\") dp <- insertRelationship(dp, \"/Users/smith/scripts/genFields.R\",     \"http://www.w3.org/ns/prov#used\",     \"https://knb.ecoinformatics.org/knb/d1/mn/v1/object/doi:1234/_030MXTI009R00_20030812.40.1\") relations <- getRelationships(dp) resMap <- new(\"ResourceMap\") resMap <- createFromTriples(resMap, relations, getIdentifiers(dp)) if (FALSE) { tf <- tempfile(fileext=\".rdf\") serializeRDF(resMap, file=tf) }"},{"path":"https://docs.ropensci.org/datapack/reference/ResourceMap-initialize.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a ResourceMap object. — initialize,ResourceMap-method","title":"Initialize a ResourceMap object. — initialize,ResourceMap-method","text":"Create ResourceMap object contains relationships (RDF triples) objects DataPackage.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/ResourceMap-initialize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a ResourceMap object. — initialize,ResourceMap-method","text":"","code":"# S4 method for ResourceMap initialize(.Object, id = NA_character_)"},{"path":"https://docs.ropensci.org/datapack/reference/ResourceMap-initialize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a ResourceMap object. — initialize,ResourceMap-method","text":".Object ResourceMap object id unique identifier identify ResourceMap. id used internally ResourceMap.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/ResourceMap-initialize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a ResourceMap object. — initialize,ResourceMap-method","text":"ResourceMap object","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/SystemMetadata-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A DataONE SystemMetadata object containing basic identification, ownership, access policy, replication policy, and related metadata. — SystemMetadata-class","title":"A DataONE SystemMetadata object containing basic identification, ownership, access policy, replication policy, and related metadata. — SystemMetadata-class","text":"class representing DataONE SystemMetadata, core information objects stored repository needed manage objects across systems.  SystemMetadata contains basic identification, ownership, access policy, replication policy, related metadata.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/SystemMetadata-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A DataONE SystemMetadata object containing basic identification, ownership, access policy, replication policy, and related metadata. — SystemMetadata-class","text":"serialVersion value type \"numeric\", current version system metadata; update current version identifier value type \"character\", identifier object system metadata describes. replicationAllowed value type \"logical\", replication policy allows replicas. numberReplicas value type \"numeric\", number supported replicas. preferredNodes value type \"list\", preferred member nodes. blockedNodes value type \"list\", blocked member nodes. formatId value type \"character\", DataONE object format object. size value type \"numeric\", size object bytes. checksum value type \"character\", checksum object using designated checksum algorithm. checksumAlgorithm value type \"character\", name hash function used generate checksum, DataONE controlled list. submitter value type \"character\", Distinguished Name identifier person submitting object. rightsHolder value type \"character\", Distinguished Name identifier person holds access rights object. accessPolicy value type \"data.frame\", list access rules (subject, permission) tuples applied object. obsoletes value type \"character\", identifier object object replaces. obsoletedBy value type \"character\", identifier object replaces object. archived value type \"logical\", boolean flag indicating whether object archived thus hidden. dateUploaded value type \"character\", date object uploaded member node. dateSysMetadataModified value type \"character\", last date system metadata modified. originMemberNode value type \"character\", node identifier node object originally registered. authoritativeMemberNode value type \"character\", node identifier node currently authoritative object. seriesId value type \"character\", unique Unicode string identifies object revision chain. seriesId resolve latest version object. mediaType value type \"character\", IANA Media Type (aka MIME-Type) object, e.g. \"text/csv\". fileName value type \"character\", name file create object downloaded DataONE. mediaTypeProperty value type \"list\" \"character\", IANA Media Type properties \"mediaType\" argument","code":""},{"path":"https://docs.ropensci.org/datapack/reference/SystemMetadata-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"A DataONE SystemMetadata object containing basic identification, ownership, access policy, replication policy, and related metadata. — SystemMetadata-class","text":"initialize: Initialize DataONE SystemMetadata object default values values passed constructor object SystemMetadata: Create SystemMetadata object, fields set value found XML document parseSystemMetadata: Parse external XML document populate SystemMetadata object parsed data serializeSystemMetadata: Get Count Objects Package validate: Validate SystemMetadata object addAccessRule: Add access rules object system metadata hasAccessRule: Determine particular access rules exists within SystemMetadata. clearAccessPolicy: Clear accessPolicy specified object.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/SystemMetadata-initialize.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a DataONE SystemMetadata object with default values or values passed in to the constructor. — initialize,SystemMetadata-method","title":"Initialize a DataONE SystemMetadata object with default values or values passed in to the constructor. — initialize,SystemMetadata-method","text":"Initialize SystemMetadata object providing default values core information  needed manage objects across repository systems. SystemMetadata contains basic identification, ownership, access policy, replication policy, related metadata.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/SystemMetadata-initialize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a DataONE SystemMetadata object with default values or values passed in to the constructor. — initialize,SystemMetadata-method","text":"","code":"# S4 method for SystemMetadata initialize(   .Object,   identifier = NA_character_,   formatId = NA_character_,   size = NA_real_,   checksum = NA_character_,   checksumAlgorithm = \"SHA-256\",   submitter = NA_character_,   rightsHolder = NA_character_,   accessPolicy = data.frame(subject = character(), permission = character()),   replicationAllowed = TRUE,   numberReplicas = 3,   obsoletes = NA_character_,   obsoletedBy = NA_character_,   archived = FALSE,   dateUploaded = NA_character_,   dateSysMetadataModified = NA_character_,   originMemberNode = NA_character_,   authoritativeMemberNode = NA_character_,   preferredNodes = list(),   blockedNodes = list(),   seriesId = NA_character_,   mediaType = NA_character_,   fileName = NA_character_,   mediaTypeProperty = list() )"},{"path":"https://docs.ropensci.org/datapack/reference/SystemMetadata-initialize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a DataONE SystemMetadata object with default values or values passed in to the constructor. — initialize,SystemMetadata-method","text":".Object object initialized identifier value type \"character\", identifier object system metadata describes. formatId value type \"character\", DataONE object format object. size value type \"numeric\", size object bytes. checksum value type \"character\", checksum object using designated checksum algorithm. checksumAlgorithm value type \"character\", name hash function used generate checksum, DataONE controlled list. submitter value type \"character\", Distinguished Name identifier person submitting object. rightsHolder value type \"character\", Distinguished Name identifier person holds access rights object. accessPolicy value type \"data.frame\" containing (subject, permission) tuples constitute access authorization rules. replicationAllowed value type \"logical\", replication policy allows replicas. numberReplicas value type \"numeric\", number supported replicas. obsoletes value type \"character\", identifier object object replaces. obsoletedBy value type \"character\", identifier object replaces object. archived value type \"logical\", boolean flag indicating whether object archived thus hidden. dateUploaded value type \"character\", date object uploaded member node. dateSysMetadataModified value type \"character\", last date system metadata modified. originMemberNode value type \"character\", node identifier node object originally registered. authoritativeMemberNode value type \"character\", node identifier node currently authoritative object. preferredNodes list \"character\", node identifier node replica sent. blockedNodes list \"character\", node identifier node blocked housing replicas. seriesId value type \"character\", unique Unicode string identifies object revision chain. seriesId resolve latest version object. mediaType value type \"character\", IANA Media Type (aka MIME-Type) object, e.g. \"text/csv\". fileName value type \"character\", name file create object downloaded DataONE. mediaTypeProperty value type \"list\" \"character\", IANA Media Type properties \"mediaType\" argument","code":""},{"path":"https://docs.ropensci.org/datapack/reference/SystemMetadata-initialize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a DataONE SystemMetadata object with default values or values passed in to the constructor. — initialize,SystemMetadata-method","text":"SystemMetadata instance representing object","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/SystemMetadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Create DataONE SystemMetadata object — SystemMetadata","title":"Create DataONE SystemMetadata object — SystemMetadata","text":"class representing DataONE SystemMetadata, core information objects stored repository needed manage objects across systems.  SystemMetadata contains basic identification, ownership, access policy, replication policy, related metadata. *sysmeta* parameter specified, construct new SystemMetadata instance using fields  XML representation SystemMetadata.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/SystemMetadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create DataONE SystemMetadata object — SystemMetadata","text":"","code":"SystemMetadata(...)  # S4 method for XMLInternalElementNode SystemMetadata(x, ...)"},{"path":"https://docs.ropensci.org/datapack/reference/SystemMetadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create DataONE SystemMetadata object — SystemMetadata","text":"... Additional arguments x value type \"XMLInternalElementNode\", containing parsed XML element SystemMetadata fields.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/addAccessRule.html","id":null,"dir":"Reference","previous_headings":"","what":"Add access rules to the specified object. — addAccessRule","title":"Add access rules to the specified object. — addAccessRule","text":"Add one access rules access policy specified object.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/addAccessRule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add access rules to the specified object. — addAccessRule","text":"","code":"addAccessRule(x, ...)  # S4 method for SystemMetadata addAccessRule(x, y, ...)  # S4 method for DataObject addAccessRule(x, y, ...)  # S4 method for DataPackage addAccessRule(x, y, ...)"},{"path":"https://docs.ropensci.org/datapack/reference/addAccessRule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add access rules to the specified object. — addAccessRule","text":"x object instance add rules ... Additional arguments permission permission applied subject x character (read, write, changePermission) y subject rule added, data frame subject/permission tuples","code":""},{"path":"https://docs.ropensci.org/datapack/reference/addAccessRule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add access rules to the specified object. — addAccessRule","text":"SystemMetadata object updated access policy. DataObject updated access policy DataPackage updated DataObject access policies","code":""},{"path":"https://docs.ropensci.org/datapack/reference/addAccessRule.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add access rules to the specified object. — addAccessRule","text":"y argument specified character string containing subject, optional permission parameter must specified, contains character list specifying permissions add subject. Note addAccessRule called `DataPackage` argument,  additional parameter identifiers can used: identifiers list character values containing package member identifiers access rule applied (members default).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/addAccessRule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add access rules to the specified object. — addAccessRule","text":"","code":"# Add an access rule to a SystemMetadata access policy. # Parameter \"y\" can be character string containing the subject of the access rule: sysmeta <- new(\"SystemMetadata\") sysmeta <- addAccessRule(sysmeta, \"uid=smith,ou=Account,dc=example,dc=com\", \"write\") accessRules <- data.frame(subject=c(\"uid=smith,ou=Account,dc=example,dc=com\",    \"uid=slaughter,o=unaffiliated,dc=example,dc=org\"), permission=c(\"write\", \"changePermission\")) sysmeta <- addAccessRule(sysmeta, accessRules) # Alternatively, parameter \"y\" can be a data.frame containing one or more access rules: sysmeta <- addAccessRule(sysmeta, \"uid=smith,ou=Account,dc=example,dc=com\", \"write\") accessRules <- data.frame(subject=c(\"uid=smith,ou=Account,dc=example,dc=com\",    \"uid=slaughter,o=unaffiliated,dc=example,dc=org\"), permission=c(\"write\", \"changePermission\")) sysmeta <- addAccessRule(sysmeta, accessRules) # Add an access rule to a DataObject data <- charToRaw(\"1,2,3\\n4,5,6\\n\") obj <- new(\"DataObject\", id=\"1234\", dataobj=data, format=\"text/csv\") obj <- addAccessRule(obj, \"uid=smith,ou=Account,dc=example,dc=com\", \"write\") # Add an access rule to members of a DataPackage # First create a sample DataPackage dp <- new(\"DataPackage\") data <- charToRaw(\"1,2,3\\n4,5,6\\n\") obj <- new(\"DataObject\", id=\"id1\", dataobj=data, format=\"text/csv\") dp <- addMember(dp, obj) data2 <- charToRaw(\"7,8,9\\n4,10,11\\n\") obj2 <- new(\"DataObject\", id=\"id2\", dataobj=data2, format=\"text/csv\") dp <- addMember(dp, obj2) # Add access rule to all package members dp <- addAccessRule(dp, \"uid=smith,ou=Account,dc=example,dc=com\", \"write\", getIdentifiers(dp))"},{"path":"https://docs.ropensci.org/datapack/reference/addData.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a DataObject to the DataPackage — addData","title":"Add a DataObject to the DataPackage — addData","text":"DataObject added DataPackage.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/addData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a DataObject to the DataPackage — addData","text":"","code":"addData(x, do, ...)  # S4 method for DataPackage,DataObject addData(x, do, mo = NA_character_)"},{"path":"https://docs.ropensci.org/datapack/reference/addData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a DataObject to the DataPackage — addData","text":"x DataPackage instance DataObject instance ... (Additional parameters) mo DataObject (containing metadata describing \"\" ) associate science object.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/addData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a DataObject to the DataPackage — addData","text":"updated DataPackage object","code":""},{"path":"https://docs.ropensci.org/datapack/reference/addData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a DataObject to the DataPackage — addData","text":"DataObject \"\" added DataPackage. optional \"mo\" parameter specified,  assumed DataObject \"mo\" metadata object describes science object \"\" added. addData function add relationship DataPackage resource map indicates metadata object describes science object using  Citation Typing Ontology (CITO). Note: method updates passed-DataPackage object. documents isDocumentedBy relationship.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/addData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a DataObject to the DataPackage — addData","text":"","code":"dpkg <- new(\"DataPackage\") data <- charToRaw(\"1,2,3\\n4,5,6\") metadata <- charToRaw(\"EML or other metadata document text goes here\\n\") md <- new(\"DataObject\", id=\"md1\", dataobj=metadata, format=\"text/xml\", user=\"smith\",    mnNodeId=\"urn:node:KNB\") do <- new(\"DataObject\", id=\"id1\", dataobj=data, format=\"text/csv\", user=\"smith\",    mnNodeId=\"urn:node:KNB\") # Associate the metadata object with the science object. The 'mo' object will be added  # to the package  automatically, since it hasn't been added yet. # This method is now deprecated, so suppress warnings if desired.  suppressWarnings(dpkg <- addData(dpkg, do, md))"},{"path":"https://docs.ropensci.org/datapack/reference/addMember.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a DataObject to the DataPackage — addMember","title":"Add a DataObject to the DataPackage — addMember","text":"DataObject added DataPackage.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/addMember.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a DataObject to the DataPackage — addMember","text":"","code":"addMember(x, ...)  # S4 method for DataPackage addMember(x, do, mo = NA_character_)"},{"path":"https://docs.ropensci.org/datapack/reference/addMember.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a DataObject to the DataPackage — addMember","text":"x DataPackage instance ... (Additional parameters) DataObject add. mo DataObject (containing metadata describing \"\" ) associate science object. DataObject  already added package, argument can \"character\" containing DataObject identifier.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/addMember.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a DataObject to the DataPackage — addMember","text":"updated DataPackage object","code":""},{"path":"https://docs.ropensci.org/datapack/reference/addMember.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a DataObject to the DataPackage — addMember","text":"DataObject \"\" added DataPackage. optional \"mo\" parameter specified,  assumed DataObject \"mo\" metadata object describes science object \"\" added. addMember function add relationship DataPackage resource map indicates metadata object describes science object using  Citation Typing Ontology (CITO). Note: method updates passed-DataPackage object. documents isDocumentedBy relationship.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/addMember.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a DataObject to the DataPackage — addMember","text":"","code":"dpkg <- new(\"DataPackage\") data <- charToRaw(\"1,2,3\\n4,5,6\") metadata <- charToRaw(\"EML or other metadata document text goes here\\n\") md <- new(\"DataObject\", id=\"md1\", dataobj=metadata, format=\"text/xml\", user=\"smith\",    mnNodeId=\"urn:node:KNB\") do <- new(\"DataObject\", id=\"id1\", dataobj=data, format=\"text/csv\", user=\"smith\",    mnNodeId=\"urn:node:KNB\") # Associate the metadata object with the science object. The 'mo' object will be added  # to the package  automatically, since it hasn't been added yet. dpkg <- addMember(dpkg, do, md)"},{"path":"https://docs.ropensci.org/datapack/reference/calculateChecksum.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a checksum for the DataObject using the specified checksum algorithm — calculateChecksum","title":"Calculate a checksum for the DataObject using the specified checksum algorithm — calculateChecksum","text":"calculates checksum","code":""},{"path":"https://docs.ropensci.org/datapack/reference/calculateChecksum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a checksum for the DataObject using the specified checksum algorithm — calculateChecksum","text":"","code":"calculateChecksum(x, ...)  # S4 method for DataObject calculateChecksum(x, checksumAlgorithm = \"SHA256\", ...)"},{"path":"https://docs.ropensci.org/datapack/reference/calculateChecksum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a checksum for the DataObject using the specified checksum algorithm — calculateChecksum","text":"x DataObject instance ... Additional parameters (yet used) checksumAlgorithm character value specifying checksum algorithm use (.e \"MD5\" \"SHA1\" \"SHA256\")","code":""},{"path":"https://docs.ropensci.org/datapack/reference/calculateChecksum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a checksum for the DataObject using the specified checksum algorithm — calculateChecksum","text":"calculated checksum","code":""},{"path":"https://docs.ropensci.org/datapack/reference/calculateChecksum.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate a checksum for the DataObject using the specified checksum algorithm — calculateChecksum","text":"method intended internal package use .","code":""},{"path":"https://docs.ropensci.org/datapack/reference/canRead.html","id":null,"dir":"Reference","previous_headings":"","what":"Test whether the provided subject can read an object. — canRead","title":"Test whether the provided subject can read an object. — canRead","text":"Using AccessPolicy, tests whether subject read permission object.  method meant work prior submission repository,  show permissions enforced repository submission. Currently uses AccessPolicy determine can read (rightsHolder field, always can read object).  object granted read access special \"public\" subject, subjects read access.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/canRead.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test whether the provided subject can read an object. — canRead","text":"","code":"canRead(x, ...)  # S4 method for DataObject canRead(x, subject)"},{"path":"https://docs.ropensci.org/datapack/reference/canRead.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test whether the provided subject can read an object. — canRead","text":"x DataObject ... Additional arguments subject : subject name person/system check read permissions","code":""},{"path":"https://docs.ropensci.org/datapack/reference/canRead.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test whether the provided subject can read an object. — canRead","text":"boolean TRUE subject read permission, FALSE otherwise","code":""},{"path":"https://docs.ropensci.org/datapack/reference/canRead.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test whether the provided subject can read an object. — canRead","text":"subject name used AccessPolicy 'subject' argument method string value, generally formatted X.509 name formatted according RFC 2253.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/canRead.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test whether the provided subject can read an object. — canRead","text":"","code":"data <- charToRaw(\"1,2,3\\n4,5,6\\n\") obj <- new(\"DataObject\", id=\"1234\", dataobj=data, format=\"text/csv\") obj <- addAccessRule(obj, \"smith\", \"read\") access <- canRead(obj, \"smith\")"},{"path":"https://docs.ropensci.org/datapack/reference/clearAccessPolicy.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear the accessPolicy from the specified object. — clearAccessPolicy","title":"Clear the accessPolicy from the specified object. — clearAccessPolicy","text":"Clears accessPolicy specified object overwriting existing access rules set object empty set.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/clearAccessPolicy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear the accessPolicy from the specified object. — clearAccessPolicy","text":"","code":"clearAccessPolicy(x, ...)  # S4 method for SystemMetadata clearAccessPolicy(x, ...)  # S4 method for DataObject clearAccessPolicy(x, ...)  # S4 method for DataPackage clearAccessPolicy(x, identifiers = list(), ...)"},{"path":"https://docs.ropensci.org/datapack/reference/clearAccessPolicy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear the accessPolicy from the specified object. — clearAccessPolicy","text":"x instance clear access rules . ... (Additional parameters) identifiers list character values containing package member identifiers access rule applied .","code":""},{"path":"https://docs.ropensci.org/datapack/reference/clearAccessPolicy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear the accessPolicy from the specified object. — clearAccessPolicy","text":"SystemMetadata object cleared access policy. DataObject cleared access policy. SystemMetadata object cleared access policy.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/clearAccessPolicy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clear the accessPolicy from the specified object. — clearAccessPolicy","text":"","code":"# Clear access policy for a SystemMetadata object. sysmeta <- new(\"SystemMetadata\") sysmeta <- addAccessRule(sysmeta, \"uid=smith,ou=Account,dc=example,dc=com\", \"write\") sysmeta <- clearAccessPolicy(sysmeta) # Clear access policy for a DataObject do <- new(\"DataObject\", format=\"text/csv\", filename=system.file(\"extdata/sample-data.csv\",            package=\"datapack\")) do <- addAccessRule(do, \"uid=smith,ou=Account,dc=example,dc=com\", \"write\") do <- clearAccessPolicy(do) # Clear access policy for a DataPackage dp <- new(\"DataPackage\") data <- charToRaw(\"1,2,3\\n4,5,6\\n\") obj <- new(\"DataObject\", dataobj=data, format=\"text/csv\") dp <- addMember(dp, obj) data2 <- charToRaw(\"7,8,9\\n4,10,11\\n\") obj2 <- new(\"DataObject\", dataobj=data2, format=\"text/csv\") dp <- addMember(dp, obj2)  # Add the access rule to all package members dp <- addAccessRule(dp, \"uid=smith,ou=Account,dc=example,dc=com\",      permission=\"write\") # Now clear the access policy for just the second object  dp <- clearAccessPolicy(dp, getIdentifier(obj2))"},{"path":"https://docs.ropensci.org/datapack/reference/containsId.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns true if the specified object is a member of the package — containsId","title":"Returns true if the specified object is a member of the package — containsId","text":"Returns true specified object member package","code":""},{"path":"https://docs.ropensci.org/datapack/reference/containsId.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns true if the specified object is a member of the package — containsId","text":"","code":"containsId(x, ...)  # S4 method for DataPackage containsId(x, identifier)"},{"path":"https://docs.ropensci.org/datapack/reference/containsId.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns true if the specified object is a member of the package — containsId","text":"x DataPackage object ... (yet used) identifier DataObject identifier check inclusion DataPackage","code":""},{"path":"https://docs.ropensci.org/datapack/reference/containsId.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns true if the specified object is a member of the package — containsId","text":"logical - value TRUE indicates DataObject DataPackage","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/containsId.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns true if the specified object is a member of the package — containsId","text":"","code":"dp <- new(\"DataPackage\") data <- charToRaw(\"1,2,3\\n4,5,6\") id <- \"myNewId\" do <- new(\"DataObject\", id=id, dataobj=data, format=\"text/csv\", user=\"jsmith\") dp <- addMember(dp, do) isInPackage <- containsId(dp, identifier=\"myNewId\")"},{"path":"https://docs.ropensci.org/datapack/reference/createFromTriples.html","id":null,"dir":"Reference","previous_headings":"","what":"Populate a ResourceMap with RDF relationships from data.frame. — createFromTriples","title":"Populate a ResourceMap with RDF relationships from data.frame. — createFromTriples","text":"RDF relationships added ResourceMap object data.frame contains RDF triples. example, relationships can exported DataPackage via getRelationships. resulting data.frame read createFromTriples create ResourceMap.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/createFromTriples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Populate a ResourceMap with RDF relationships from data.frame. — createFromTriples","text":"","code":"createFromTriples(x, ...)  # S4 method for ResourceMap createFromTriples(   x,   relations,   identifiers,   resolveURI = NA_character_,   externalIdentifiers = list(),   creator = NA_character_,   ... )"},{"path":"https://docs.ropensci.org/datapack/reference/createFromTriples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Populate a ResourceMap with RDF relationships from data.frame. — createFromTriples","text":"x ResourceMap ... (Additional parameters) relations data.frame read relationships identifiers list identifiers data objects contained associated data package resolveURI character string containing URI prepend datapackage identifiers. externalIdentifiers list identifiers referenced package, package members. creator character string containing creator package.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/createFromTriples.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Populate a ResourceMap with RDF relationships from data.frame. — createFromTriples","text":"identifiers parameter contains identifiers data objects DataPackage. data objects, additional relationships added required OAI-ORE specification, example Dublin Core identifier statement added. resolveURI string value prepended  DataPackage member identifiers resulting resource map. resolveURI value specified, 'https://cn.dataone.org/cn/v1/resolve' used.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/createFromTriples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Populate a ResourceMap with RDF relationships from data.frame. — createFromTriples","text":"","code":"library(datapack) dp <- new(\"DataPackage\") data <- charToRaw(\"1,2,3\\n4,5,6\") do1 <- new(\"DataObject\", id=\"id1\", data, format=\"text/csv\") do2 <- new(\"DataObject\", id=\"id2\", data, format=\"text/csv\") dp <- addMember(dp, do1) dp <- addMember(dp, do2) dp <- insertRelationship(dp, subjectID=\"id1\", objectIDs=\"id2\",    predicate=\"http://www.w3.org/ns/prov#wasDerivedFrom\") relations <- getRelationships(dp) resMapId <- sprintf(\"%s%s\", \"resourceMap_\", uuid::UUIDgenerate())   resMap <- new(\"ResourceMap\", id=resMapId) resMap <- createFromTriples(resMap, relations, getIdentifiers(dp))"},{"path":"https://docs.ropensci.org/datapack/reference/datapack-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated Methods — datapack-deprecated","title":"Deprecated Methods — datapack-deprecated","text":"following items deprecated release datapack marked Defunct removed future version.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/datapack-deprecated.html","id":"these-methods-are-deprecated","dir":"Reference","previous_headings":"","what":"These methods are deprecated","title":"Deprecated Methods — datapack-deprecated","text":"recordDerivation: Record derivation relationships objects DataPackage. addData: Add DataObject DataPackage.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/datapack.html","id":null,"dir":"Reference","previous_headings":"","what":"datapack, a container for packages of data and associated metadata — datapack","title":"datapack, a container for packages of data and associated metadata — datapack","text":"datapack R package provides abstraction collating  heterogeneous collections data objects metadata bundle can  transported loaded single composite file.  methods package provide convenient way load data common repositories DataONE R environment,  document, serialize, save data R data repositories worldwide.  data package represented instance S4 class DataPackage,  consists one instances S4 DataObject class, turn contains instance S4 SystemMetadata class.  SystemMetadata class provides critical metadata data object needed transport external repository, including identifier object, format, checksum size, information repositories data associated .  DataPackages can loaded saved  DataONE federated network repositories using dataone package,  can also used standalone transport containers systems. DataPackage includes manifest based OAI-ORE  specification describing aggregations files ResourceMap.  Resource maps RDF documents conform Open Archives Initiative Object Reuse Exchange (OAI-ORE) specification. Resource maps generated  data providers define data packages, namespace  http://www.openarchives.org/ore/terms/. DataPackage serialized zip file following BagIt RFC specification, provides consistent mechanism serialized representation  group opaque objects predictable structure. BagIt includes  specification including metadata objects, bag ,  fixity attributes BagIt implementation can validate  components contained within package.  expanded, BagIt zipfile expand common directory structure predictable set metadata describes structure content bag.  Conformance BagIt specification handled DataPackage class.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/datapack.html","id":"classes","dir":"Reference","previous_headings":"","what":"Classes","title":"datapack, a container for packages of data and associated metadata — datapack","text":"DataPackage-class: class representing data package, can contain data objects DataObject-class: DataObject wraps raw data system-level metadata SystemMetadata-class{SystemMetadata}: DataONE SystemMetadata object containing basic identification, ownership, access policy, replication policy, related metadata. ResourceMap-class{ResourceMap}: ResourceMap provides methods create, serialize deserialize OAI ORE resource map.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/datapack.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"datapack, a container for packages of data and associated metadata — datapack","text":"Matthew B. Jones (NCEAS), Peter Slaughter (NCEAS)","code":""},{"path":"https://docs.ropensci.org/datapack/reference/describeWorkflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Add data derivation information to a DataPackage — describeWorkflow","title":"Add data derivation information to a DataPackage — describeWorkflow","text":"Add information relationships among DataObject members  DataPackage, retrospectively describing way derived data  created source data using processing program R script.  provenance relationships allow derived data understood sufficiently users able reproduce computations created derived data, trace lineage derived data objects. method describeWorkflow  add provenance relationships script executed, files  used sources, derived files generated.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/describeWorkflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add data derivation information to a DataPackage — describeWorkflow","text":"","code":"describeWorkflow(x, ...)  # S4 method for DataPackage describeWorkflow(   x,   sources = list(),   program = NA_character_,   derivations = list(),   insertDerivations = TRUE,   ... )"},{"path":"https://docs.ropensci.org/datapack/reference/describeWorkflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add data derivation information to a DataPackage — describeWorkflow","text":"x DataPackage add provenance relationships . ... Additional parameters sources list DataObjects files read program. Alternatively, list  DataObject identifiers can specified list character strings. program DataObject created program R script. Alternatively DataObject identifier can specified. derivations list DataObjects files generated program. Alternatively, list  DataObject identifiers can specified list character strings. insertDerivations logical value. TRUE provenance relationship  prov:wasDerivedFrom used connect every source derivation. default value  TRUE.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/describeWorkflow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add data derivation information to a DataPackage — describeWorkflow","text":"method operates DataPackage DataObjects  script, data sources (inputs), data derivations (outputs) previously  added , can reference identifiers objects exist DataPackage instances. allows user create standalone package contains source, script, derived data, set data packages chained together via set derivation relationships members packages. Provenance relationships described following ProvONE data model, can viewed https://purl.dataone.org/provone-v1-dev.  particular,  following relationships inserted (among others): prov:used indicates source data used program execution prov:generatedBy indicates derived data created program execution prov:wasDerivedFrom indicates source data derived data created using program","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/describeWorkflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add data derivation information to a DataPackage — describeWorkflow","text":"","code":"library(datapack) dp <- new(\"DataPackage\") # Add the script to the DataPackage progFile <- system.file(\"./extdata/pkg-example/logit-regression-example.R\", package=\"datapack\") progObj <- new(\"DataObject\", format=\"application/R\", filename=progFile) dp <- addMember(dp, progObj)  # Add a script input to the DataPackage inFile <- system.file(\"./extdata/pkg-example/binary.csv\", package=\"datapack\")  inObj <- new(\"DataObject\", format=\"text/csv\", filename=inFile) dp <- addMember(dp, inObj)  # Add a script output to the DataPackage outFile <- system.file(\"./extdata/pkg-example/gre-predicted.png\", package=\"datapack\") outObj <- new(\"DataObject\", format=\"image/png\", file=outFile) dp <- addMember(dp, outObj)  # Add the provenenace relationshps, linking the input and output to the script execution # Note: 'sources' and 'derivations' can also be lists of \"DataObjects\" or \"DataObject' identifiers dp <- describeWorkflow(dp, sources = inObj, program = progObj, derivations = outObj)  # View the results utils::head(getRelationships(dp)) #>                                          subject #> 6          _10ebd4dc-a4e2-4bfa-9b03-5606612624a4 #> 5          _10ebd4dc-a4e2-4bfa-9b03-5606612624a4 #> 7  urn:uuid:1d296755-15b0-49db-9a67-13f1c7b3a7bd #> 1  urn:uuid:5e8600fe-9933-4aa8-baa0-d547b41ad581 #> 2  urn:uuid:66284e63-c365-4605-856f-e7d5ebd5699a #> 11 urn:uuid:66284e63-c365-4605-856f-e7d5ebd5699a #>                                          predicate #> 6  http://www.w3.org/1999/02/22-rdf-syntax-ns#type #> 5                http://www.w3.org/ns/prov#hadPlan #> 7  http://www.w3.org/1999/02/22-rdf-syntax-ns#type #> 1  http://www.w3.org/1999/02/22-rdf-syntax-ns#type #> 2  http://www.w3.org/1999/02/22-rdf-syntax-ns#type #> 11        http://www.w3.org/ns/prov#wasDerivedFrom #>                                                         object subjectType #> 6                        http://www.w3.org/ns/prov#Association       blank #> 5                urn:uuid:1d296755-15b0-49db-9a67-13f1c7b3a7bd       blank #> 7  http://purl.dataone.org/provone/2015/01/15/ontology#Program        <NA> #> 1     http://purl.dataone.org/provone/2015/01/15/ontology#Data        <NA> #> 2     http://purl.dataone.org/provone/2015/01/15/ontology#Data        <NA> #> 11               urn:uuid:5e8600fe-9933-4aa8-baa0-d547b41ad581        <NA> #>    objectType dataTypeURI #> 6         uri        <NA> #> 5         uri        <NA> #> 7         uri        <NA> #> 1         uri        <NA> #> 2         uri        <NA> #> 11       <NA>        <NA>"},{"path":"https://docs.ropensci.org/datapack/reference/dmsg.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a debugging message to stderr. — dmsg","title":"Print a debugging message to stderr. — dmsg","text":"Print debugging message stderr.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/dmsg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a debugging message to stderr. — dmsg","text":"","code":"dmsg(msg)"},{"path":"https://docs.ropensci.org/datapack/reference/dmsg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a debugging message to stderr. — dmsg","text":"msg message printed","code":""},{"path":"https://docs.ropensci.org/datapack/reference/dmsg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print a debugging message to stderr. — dmsg","text":"print message option \"datapack.debugging_mode\" TRUE.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/freeResourceMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Free memory used by a ResouceMap. — freeResourceMap","title":"Free memory used by a ResouceMap. — freeResourceMap","text":"resources allocated redland RDF package freed. ResourceMap object deleted immediately following call.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/freeResourceMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Free memory used by a ResouceMap. — freeResourceMap","text":"","code":"freeResourceMap(x)  # S4 method for ResourceMap freeResourceMap(x)"},{"path":"https://docs.ropensci.org/datapack/reference/freeResourceMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Free memory used by a ResouceMap. — freeResourceMap","text":"x ResourceMap","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/getData.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the data content of a specified data object — getData","title":"Get the data content of a specified data object — getData","text":"Get data content specified data object","code":""},{"path":"https://docs.ropensci.org/datapack/reference/getData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the data content of a specified data object — getData","text":"","code":"getData(x, ...)  # S4 method for DataObject getData(x)  # S4 method for DataPackage getData(x, id)"},{"path":"https://docs.ropensci.org/datapack/reference/getData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the data content of a specified data object — getData","text":"x DataObject DataPackage: data structure get data ... Additional arguments id Missing character: 'x' DataPackage, identifier package member get data ","code":""},{"path":"https://docs.ropensci.org/datapack/reference/getData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the data content of a specified data object — getData","text":"raw representation data","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/getData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the data content of a specified data object — getData","text":"","code":"data <- charToRaw(\"1,2,3\\n4,5,6\\n\") do <- new(\"DataObject\", \"id1\", dataobj=data, \"text/csv\",    \"uid=jones,DC=example,DC=com\", \"urn:node:KNB\") bytes <- getData(do) dp <- new(\"DataPackage\") data <- charToRaw(\"1,2,3\\n4,5,6\") do1 <- new(\"DataObject\", id=\"id1\", data, format=\"text/csv\", user=\"smith\", mnNodeId=\"urn:node:KNB\") dp <- addMember(dp, do1) bytes <- getData(dp, \"id1\")"},{"path":"https://docs.ropensci.org/datapack/reference/getFormatId.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the FormatId of the DataObject — getFormatId","title":"Get the FormatId of the DataObject — getFormatId","text":"Get FormatId DataObject","code":""},{"path":"https://docs.ropensci.org/datapack/reference/getFormatId.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the FormatId of the DataObject — getFormatId","text":"","code":"getFormatId(x, ...)  # S4 method for DataObject getFormatId(x)"},{"path":"https://docs.ropensci.org/datapack/reference/getFormatId.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the FormatId of the DataObject — getFormatId","text":"x DataObject ... (yet used)","code":""},{"path":"https://docs.ropensci.org/datapack/reference/getFormatId.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the FormatId of the DataObject — getFormatId","text":"formatId","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/getFormatId.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the FormatId of the DataObject — getFormatId","text":"","code":"data <- charToRaw(\"1,2,3\\n4,5,6\\n\") do <- new(\"DataObject\", \"id1\", dataobj=data, \"text/csv\",    \"uid=jones,DC=example,DC=com\", \"urn:node:KNB\") fmtId <- getFormatId(do)"},{"path":"https://docs.ropensci.org/datapack/reference/getIdentifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Identifier of the DataObject — getIdentifier","title":"Get the Identifier of the DataObject — getIdentifier","text":"Get Identifier DataObject","code":""},{"path":"https://docs.ropensci.org/datapack/reference/getIdentifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Identifier of the DataObject — getIdentifier","text":"","code":"getIdentifier(x, ...)  # S4 method for DataObject getIdentifier(x)"},{"path":"https://docs.ropensci.org/datapack/reference/getIdentifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Identifier of the DataObject — getIdentifier","text":"x DataObject ... (yet used)","code":""},{"path":"https://docs.ropensci.org/datapack/reference/getIdentifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Identifier of the DataObject — getIdentifier","text":"identifier","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/getIdentifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Identifier of the DataObject — getIdentifier","text":"","code":"data <- charToRaw(\"1,2,3\\n4,5,6\\n\") do <- new(\"DataObject\", \"id1\", dataobj=data, \"text/csv\",    \"uid=jones,DC=example,DC=com\", \"urn:node:KNB\") id <- getIdentifier(do)"},{"path":"https://docs.ropensci.org/datapack/reference/getIdentifiers.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Identifiers of Package Members — getIdentifiers","title":"Get the Identifiers of Package Members — getIdentifiers","text":"identifiers objects package retrieved returned list.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/getIdentifiers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Identifiers of Package Members — getIdentifiers","text":"","code":"getIdentifiers(x, ...)  # S4 method for DataPackage getIdentifiers(x)"},{"path":"https://docs.ropensci.org/datapack/reference/getIdentifiers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Identifiers of Package Members — getIdentifiers","text":"x DataPackage instance ... (yet used)","code":""},{"path":"https://docs.ropensci.org/datapack/reference/getIdentifiers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Identifiers of Package Members — getIdentifiers","text":"list identifiers","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/getIdentifiers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Identifiers of Package Members — getIdentifiers","text":"","code":"dp <- new(\"DataPackage\") data <- charToRaw(\"1,2,3\\n4,5,6\") do <- new(\"DataObject\", dataobj=data, format=\"text/csv\", user=\"jsmith\") dp <- addMember(dp, do) getIdentifiers(dp) #> [1] \"urn:uuid:6e90f025-8edc-441a-995c-6132a1964468\""},{"path":"https://docs.ropensci.org/datapack/reference/getMember.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the Package Member by Identifier — getMember","title":"Return the Package Member by Identifier — getMember","text":"Given identifier member data package, return DataObject representation member.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/getMember.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the Package Member by Identifier — getMember","text":"","code":"getMember(x, ...)  # S4 method for DataPackage getMember(x, identifier)"},{"path":"https://docs.ropensci.org/datapack/reference/getMember.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the Package Member by Identifier — getMember","text":"x DataPackage instance ... (yet used) identifier DataObject identifier","code":""},{"path":"https://docs.ropensci.org/datapack/reference/getMember.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the Package Member by Identifier — getMember","text":"DataObject member found, NULL ","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/getMember.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the Package Member by Identifier — getMember","text":"","code":"dp <- new(\"DataPackage\") data <- charToRaw(\"1,2,3\\n4,5,6\") do <- new(\"DataObject\", id=\"myNewId\", dataobj=data, format=\"text/csv\", user=\"jsmith\") dp <- addMember(dp, do) do2 <- getMember(dp, \"myNewId\")"},{"path":"https://docs.ropensci.org/datapack/reference/getRelationships.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve relationships of package objects — getRelationships","title":"Retrieve relationships of package objects — getRelationships","text":"Relationships objects package defined using 'insertRelationship' call retrieved using getRetaionships. relationships returned data frame 'subject', 'predicate', 'objects' columns, ordered \"subject\"","code":""},{"path":"https://docs.ropensci.org/datapack/reference/getRelationships.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve relationships of package objects — getRelationships","text":"","code":"getRelationships(x, ...)  # S4 method for DataPackage getRelationships(x, condense = F, ...)"},{"path":"https://docs.ropensci.org/datapack/reference/getRelationships.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve relationships of package objects — getRelationships","text":"x DataPackage object ... (yet used) condense logical value, TRUE easily viewed version relationships returned.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/getRelationships.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve relationships of package objects — getRelationships","text":"","code":"dp <- new(\"DataPackage\") insertRelationship(dp, \"/Users/smith/scripts/genFields.R\",     \"http://www.w3.org/ns/prov#used\",     \"https://knb.ecoinformatics.org/knb/d1/mn/v1/object/doi:1234/_030MXTI009R00_20030812.40.1\") #> This package does not contain any DataObjects. rels <- getRelationships(dp)"},{"path":"https://docs.ropensci.org/datapack/reference/getSize.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Count of Objects in the Package — getSize","title":"Get the Count of Objects in the Package — getSize","text":"Get Count Objects Package","code":""},{"path":"https://docs.ropensci.org/datapack/reference/getSize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Count of Objects in the Package — getSize","text":"","code":"getSize(x, ...)  # S4 method for DataPackage getSize(x)"},{"path":"https://docs.ropensci.org/datapack/reference/getSize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Count of Objects in the Package — getSize","text":"x DataPackage instance ... (yet used)","code":""},{"path":"https://docs.ropensci.org/datapack/reference/getSize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Count of Objects in the Package — getSize","text":"number object Package","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/getSize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Count of Objects in the Package — getSize","text":"","code":"dp <- new(\"DataPackage\") data <- charToRaw(\"1,2,3\\n4,5,6\") do <- new(\"DataObject\", dataobj=data, format=\"text/csv\", user=\"jsmith\") dp <- addMember(dp, do) getSize(dp) #> [1] 1"},{"path":"https://docs.ropensci.org/datapack/reference/getTriples.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the RDF relationships stored in the ResourceMap. — getTriples","title":"Get the RDF relationships stored in the ResourceMap. — getTriples","text":"getTriples method extracts RDF relationships ResourceMap.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/getTriples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the RDF relationships stored in the ResourceMap. — getTriples","text":"","code":"getTriples(x, ...)  # S4 method for ResourceMap getTriples(x, filter = TRUE, identifiers = list(), ...)"},{"path":"https://docs.ropensci.org/datapack/reference/getTriples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the RDF relationships stored in the ResourceMap. — getTriples","text":"x ResourceMap ... Additional parameters (yet implemented). filter logical value. TRUE, DataONE packaging relationships omitted. identifiers list character values identifiers DataPackage members.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/getTriples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the RDF relationships stored in the ResourceMap. — getTriples","text":"x data.frame containing relationships ResourceMap","code":""},{"path":"https://docs.ropensci.org/datapack/reference/getTriples.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the RDF relationships stored in the ResourceMap. — getTriples","text":"filter argument causes DataONE packaging relationships removed.  description can viewed https://purl.dataone.org/architecture/design/DataPackage.html.  identifiers parameter can contain list DataPackage members  identifiers 'demoted', relationship identifiers  URL subject object changed 'bare' identifier. intent two parameter transform DataPackage 'local' state, can easily updated locally.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/getValue.html","id":null,"dir":"Reference","previous_headings":"","what":"Get values for selected DataPackage members. — getValue","title":"Get values for selected DataPackage members. — getValue","text":"Given slot name set package member identifiers, return slot values.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/getValue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get values for selected DataPackage members. — getValue","text":"","code":"getValue(x, ...)  # S4 method for DataPackage getValue(x, name, identifiers = NA_character_)"},{"path":"https://docs.ropensci.org/datapack/reference/getValue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get values for selected DataPackage members. — getValue","text":"x DataPackage instance ... (yet used) name name DataObject slot. identifiers list DataPackage member identifiers","code":""},{"path":"https://docs.ropensci.org/datapack/reference/getValue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get values for selected DataPackage members. — getValue","text":"list values matching slot names included identifiers.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/getValue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get values for selected DataPackage members. — getValue","text":"parameter identifiers provided, DataPackage members identifiers provided list values fetched. parameter provided, values DataPackage members returned.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/getValue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get values for selected DataPackage members. — getValue","text":"","code":"dp <- new(\"DataPackage\") data <- charToRaw(\"1,2,3\\n4,5,6\") do <- new(\"DataObject\", id=\"myNewId\", dataobj=data, format=\"text/csv\", user=\"jsmith\") dp <- addMember(dp, do) data <- charToRaw(\"7,8.9\\n4,10,11\") do <- new(\"DataObject\", id=\"myNewId2\", dataobj=data, format=\"text/csv\", user=\"jsmith\") dp <- addMember(dp, do) formats <- getValue(dp, name=\"sysmeta@formatId\")"},{"path":"https://docs.ropensci.org/datapack/reference/hasAccessRule.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if an access rules exists — hasAccessRule","title":"Determine if an access rules exists — hasAccessRule","text":"SystemMetadata document may contain set (subject, permission) tuples represent access rules associated object. method determines whether particular access rule already exists within set. called DataObject, SystemMetadata DataObject checked. called DataPackage, SystemMetadata DataObjects DataPackage checked.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/hasAccessRule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if an access rules exists — hasAccessRule","text":"","code":"hasAccessRule(x, ...)  # S4 method for SystemMetadata hasAccessRule(x, subject, permission)  # S4 method for DataObject hasAccessRule(x, subject, permission)  # S4 method for DataPackage hasAccessRule(x, subject, permission, identifiers = list(), ...)"},{"path":"https://docs.ropensci.org/datapack/reference/hasAccessRule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if an access rules exists — hasAccessRule","text":"x object check presence access rule. ... Additional arguments subject rule checked permission permission checked identifiers list character values containing package member identifiers access rule checked.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/hasAccessRule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if an access rules exists — hasAccessRule","text":"logical value: TRUE access rule found, FALSE found. called SystemMetadata, boolean TRUE access rule exists already, FALSE otherwise called DataObject, boolean TRUE access rule exists already, FALSE otherwise called DataPackage, boolean TRUE access rule exists specified package members already, FALSE otherwise","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/hasAccessRule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if an access rules exists — hasAccessRule","text":"","code":"# # Check access rules for a SystemMetadata object. sysmeta <- new(\"SystemMetadata\") sysmeta <- addAccessRule(sysmeta, \"uid=smith,ou=Account,dc=example,dc=com\", \"write\") accessRules <- data.frame(subject=c(\"uid=smith,ou=Account,dc=example,dc=com\",    \"uid=slaughter,o=unaffiliated,dc=example,dc=org\"), permission=c(\"write\", \"changePermission\")) sysmeta <- addAccessRule(sysmeta, accessRules) ruleExists <- hasAccessRule(sysmeta, subject=\"uid=smith,ou=Account,dc=example,dc=com\",    permission=\"write\") # # Check access rules for a DataObject data <- system.file(\"extdata/sample-data.csv\", package=\"datapack\") do <- new(\"DataObject\", file=system.file(\"./extdata/sample-data.csv\", package=\"datapack\"),                                           format=\"text/csv\") do <- setPublicAccess(do) isPublic <- hasAccessRule(do, \"public\", \"read\") accessRules <- data.frame(subject=c(\"uid=smith,ou=Account,dc=example,dc=com\",                            \"uid=wiggens,o=unaffiliated,dc=example,dc=org\"),                            permission=c(\"write\", \"changePermission\"),                            stringsAsFactors=FALSE) do <- addAccessRule(do, accessRules) SmithHasWrite <- hasAccessRule(do, \"uid=smith,ou=Account,dc=example,dc=com\", \"write\") # # Check access rules for member DataObjects of a DataPackage. # First create an example DataPackage dp <- new(\"DataPackage\") data <- charToRaw(\"1,2,3\\n4,5,6\\n\") obj <- new(\"DataObject\", id=\"id1\", dataobj=data, format=\"text/csv\") dp <- addMember(dp, obj) data2 <- charToRaw(\"7,8,9\\n4,10,11\\n\") obj2 <- new(\"DataObject\", id=\"id2\", dataobj=data2, format=\"text/csv\") dp <- addMember(dp, obj2) # Add access rules to all package members dp <- addAccessRule(dp, \"uid=smith,ou=Account,dc=example,dc=com\", \"write\") dp <- addAccessRule(dp, \"uid=smith,ou=Account,dc=example,dc=com\", \"changePermission\") hasWrite <- hasAccessRule(dp, \"uid=smith,ou=Account,dc=example,dc=com\", \"write\") hasChange <- hasAccessRule(dp, \"uid=smith,ou=Account,dc=example,dc=com\", \"changePermission\")"},{"path":"https://docs.ropensci.org/datapack/reference/insertRelationship.html","id":null,"dir":"Reference","previous_headings":"","what":"Record relationships of objects in a DataPackage — insertRelationship","title":"Record relationships of objects in a DataPackage — insertRelationship","text":"Record relationship form \"subject -> predicate -> object\", defined Resource Description Framework (RDF), .e. RDF triple.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/insertRelationship.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Record relationships of objects in a DataPackage — insertRelationship","text":"","code":"insertRelationship(x, ...)  # S4 method for DataPackage insertRelationship(   x,   subjectID,   objectIDs,   predicate = NA_character_,   subjectType = NA_character_,   objectTypes = NA_character_,   dataTypeURIs = NA_character_ )"},{"path":"https://docs.ropensci.org/datapack/reference/insertRelationship.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Record relationships of objects in a DataPackage — insertRelationship","text":"x DataPackage object ... (Additional parameters) subjectID identifier subject relationship objectIDs list identifiers object relationships (relationship recorded objectID) predicate IRI predicate relationship subjectType type assign subject, values can 'uri', 'blank' objectTypes types assign objects (cal single value list), value can 'uri', 'blank', 'literal' dataTypeURIs RDF data type specifies type object","code":""},{"path":"https://docs.ropensci.org/datapack/reference/insertRelationship.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Record relationships of objects in a DataPackage — insertRelationship","text":"updated DataPackage object","code":""},{"path":"https://docs.ropensci.org/datapack/reference/insertRelationship.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Record relationships of objects in a DataPackage — insertRelationship","text":"use DataONE, best practice specify subject predicate DataONE persistent identifiers  (https://mule1.dataone.org/ArchitectureDocs-current/design/PIDs.html). objects known DataONE, local identifiers can used, local identifiers may promoted DataONE PIDs package uploaded DataONE member node. predicate typically RDF property (IRI) schema supported DataONE, .e. \"http://www.w3.org/ns/prov#wasGeneratedBy\" multiple values specified argument objectIDS, relationship created value list \"objectIDs\". value specified subjectType objectType, NA assigned. Note relationships fetched via getRelationships() function, passed createFromTriples() function initialize ResourceMap object, underlying redland package assign appropriate values subjects objects. Note: method updates passed-DataPackage object.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/insertRelationship.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Record relationships of objects in a DataPackage — insertRelationship","text":"","code":"dp <- new(\"DataPackage\") # Create a relationship dp <- insertRelationship(dp, \"/Users/smith/scripts/genFields.R\",     \"https://knb.ecoinformatics.org/knb/d1/mn/v1/object/doi:1234/_030MXTI009R00_20030812.40.1\",     \"http://www.w3.org/ns/prov#used\") # Create a relationshp with the subject as a blank node with an automatically assigned blank  # node id dp <- insertRelationship(dp, subjectID=NA_character_, objectIDs=\"thing6\",      predicate=\"http://www.myns.org/wasThing\") # Create a relationshp with the subject as a blank node with a user assigned blank node id dp <- insertRelationship(dp, subjectID=\"urn:uuid:bc9e160e-ca21-47d5-871b-4a4820fe4451\",        objectIDs=\"thing7\", predicate=\"http://www.myns.org/hadThing\") # Create multiple relationships with the same subject, predicate, but different objects dp <- insertRelationship(dp, subjectID=\"urn:uuid:95055dc1-b2a0-4a00-bdc2-05c16d048ca2\",        objectIDs=c(\"thing4\", \"thing5\"), predicate=\"http://www.myns.org/hadThing\") # Create multiple relationships with subject and object types specified dp <- insertRelationship(dp, subjectID=\"orcid.org/0000-0002-2192-403X\",      objectIDs=\"http://www.example.com/home\", predicate=\"http://www.example.com/hadHome\",                    subjectType=\"uri\", objectType=\"literal\")"},{"path":"https://docs.ropensci.org/datapack/reference/parseRDF.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse an RDF/XML resource map from a file. — parseRDF","title":"Parse an RDF/XML resource map from a file. — parseRDF","text":"parseRDF reads file containing RDF model RDF/XML format initializes ResourceMap based content.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/parseRDF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse an RDF/XML resource map from a file. — parseRDF","text":"","code":"parseRDF(x, rdf, ...)  # S4 method for ResourceMap parseRDF(   x,   rdf,   asText = FALSE,   name = \"rdfxml\",   mimeType = \"application/rdf+xml\",   ... )"},{"path":"https://docs.ropensci.org/datapack/reference/parseRDF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse an RDF/XML resource map from a file. — parseRDF","text":"x ResourceMap rdf file character value containing resource map parsed ResourceMap object ... Additional parameters (yet used). asText logical value. TRUE, 'rdf' parameter character vector, FALSE name file read. name name RDF xml parser, default \"rdfxml\". mimeType character value containing RDF format type. default \"application/rdf+xml\".","code":""},{"path":"https://docs.ropensci.org/datapack/reference/parseRDF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse an RDF/XML resource map from a file. — parseRDF","text":"x ResourceMap containing parsed RDF/XML content","code":""},{"path":"https://docs.ropensci.org/datapack/reference/parseRDF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse an RDF/XML resource map from a file. — parseRDF","text":"method resets slot ResourceMap@world previously stored triples discarded, allowing clean model object parse new RDF content . assumed content valid ORE resource map therefor validation checks specific OAI-ORE content model performed.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/parseSystemMetadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse an external XML document and populate a SystemMetadata object with the parsed data — parseSystemMetadata","title":"Parse an external XML document and populate a SystemMetadata object with the parsed data — parseSystemMetadata","text":"Parse XML representation system metadata, set object slots SystemMetadata object  obtained values.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/parseSystemMetadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse an external XML document and populate a SystemMetadata object with the parsed data — parseSystemMetadata","text":"","code":"parseSystemMetadata(x, ...)  # S4 method for SystemMetadata parseSystemMetadata(x, xml, ...)"},{"path":"https://docs.ropensci.org/datapack/reference/parseSystemMetadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse an external XML document and populate a SystemMetadata object with the parsed data — parseSystemMetadata","text":"x SystemMetadata object ... Additional arguments passed functions methods xml XML representation capabilities, XMLInternalElementNode","code":""},{"path":"https://docs.ropensci.org/datapack/reference/parseSystemMetadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse an external XML document and populate a SystemMetadata object with the parsed data — parseSystemMetadata","text":"SystemMetadata object representing object","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/parseSystemMetadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse an external XML document and populate a SystemMetadata object with the parsed data — parseSystemMetadata","text":"","code":"library(XML) doc <- xmlParseDoc(system.file(\"testfiles/sysmeta.xml\", package=\"datapack\"), asText=FALSE) sysmeta <- new(\"SystemMetadata\") sysmeta <- parseSystemMetadata(sysmeta, xmlRoot(doc))"},{"path":"https://docs.ropensci.org/datapack/reference/plotRelationships.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot derivation relationships obtained from getRelationships — plotRelationships","title":"Plot derivation relationships obtained from getRelationships — plotRelationships","text":"Creates graph dataPackage object generated getRelationships","code":""},{"path":"https://docs.ropensci.org/datapack/reference/plotRelationships.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot derivation relationships obtained from getRelationships — plotRelationships","text":"","code":"plotRelationships(x, ...)  # S4 method for DataPackage plotRelationships(x, col = NULL, ...)"},{"path":"https://docs.ropensci.org/datapack/reference/plotRelationships.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot derivation relationships obtained from getRelationships — plotRelationships","text":"x DataPackage object ... options passed igraph plot function col vector colors used plotting","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/recordDerivation.html","id":null,"dir":"Reference","previous_headings":"","what":"Record derivation relationships between objects in a DataPackage — recordDerivation","title":"Record derivation relationships between objects in a DataPackage — recordDerivation","text":"Record derivation relationship expresses target object derived source object. use DataONE, best practice specify subject predicate DataONE persistent identifiers  (https://mule1.dataone.org/ArchitectureDocs-current/design/PIDs.html). objects known DataONE, local identifiers can used, local identifiers may promoted DataONE PIDs package uploaded DataONE member node.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/recordDerivation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Record derivation relationships between objects in a DataPackage — recordDerivation","text":"","code":"recordDerivation(x, ...)  # S4 method for DataPackage recordDerivation(x, sourceID, derivedIDs, ...)"},{"path":"https://docs.ropensci.org/datapack/reference/recordDerivation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Record derivation relationships between objects in a DataPackage — recordDerivation","text":"x DataPackage object ... Additional parameters sourceID identifier source object relationship derivedIDs identifier list identifiers objects derived source","code":""},{"path":"https://docs.ropensci.org/datapack/reference/recordDerivation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Record derivation relationships between objects in a DataPackage — recordDerivation","text":"derived relationship created value list \"objectIDs\".  derivedId, one statement added expressing derived sourceId.  predicate RDF property (IRI) W3C PROV specification, namely, \"http://www.w3.org/ns/prov#wasDerivedFrom\"","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/recordDerivation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Record derivation relationships between objects in a DataPackage — recordDerivation","text":"","code":"if (FALSE) { dp <- new(\"DataPackage\") recordDerivation(dp, \"doi:1234/_030MXTI009R00_20030812.40.1\",                   \"doi:1234/_030MXTI009R00_20030812.45.1\")                      }"},{"path":"https://docs.ropensci.org/datapack/reference/removeAccessRule.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove an access rule from the specified object. — removeAccessRule","title":"Remove an access rule from the specified object. — removeAccessRule","text":"Remove access rules access policy specified object.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/removeAccessRule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove an access rule from the specified object. — removeAccessRule","text":"","code":"removeAccessRule(x, ...)  # S4 method for SystemMetadata removeAccessRule(x, y, ...)  # S4 method for DataObject removeAccessRule(x, y, ...)  # S4 method for DataPackage removeAccessRule(x, y, permission = NA_character_, identifiers = list(), ...)"},{"path":"https://docs.ropensci.org/datapack/reference/removeAccessRule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove an access rule from the specified object. — removeAccessRule","text":"x object instance remove rule ... Additional arguments permission permission remove subject x character (read, write, changePermission) y subject rule removed, data.frame containing access rules. permission permission remove, parameter x character string containing subject. identifiers list character values containing package member identifiers access rule  applied (default package members).","code":""},{"path":"https://docs.ropensci.org/datapack/reference/removeAccessRule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove an access rule from the specified object. — removeAccessRule","text":"SystemMetadata object updated access policy. DataObject object updated access policy. Datapackage members updated access policies.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/removeAccessRule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove an access rule from the specified object. — removeAccessRule","text":"","code":"# # Remove access rules from a SystemMetadata object. # Parameter \"y\" can be character string containing the subject of the access rule: sysmeta <- new(\"SystemMetadata\") sysmeta <- addAccessRule(sysmeta, \"uid=smith,ou=Account,dc=example,dc=com\", \"write\") sysmeta <- addAccessRule(sysmeta, \"uid=smith,ou=Account,dc=example,dc=com\", \"changePermission\") sysmeta <- removeAccessRule(sysmeta, \"uid=smith,ou=Account,dc=example,dc=com\", \"changePermission\")  # Alternatively, parameter \"y\" can be a data.frame containing one or more access rules: # Add write, changePermission for uid=jones,... sysmeta <- addAccessRule(sysmeta, \"uid=jones,ou=Account,dc=example,dc=com\", \"write\") sysmeta <- addAccessRule(sysmeta, \"uid=jones,ou=Account,dc=example,dc=com\", \"changePermission\") # Now take privs for uid=jones,... away accessRules <- data.frame(subject=c(\"uid=jones,ou=Account,dc=example,dc=com\",                                       \"uid=jones,ou=Account,dc=example,dc=com\"),                                       permission=c(\"write\", \"changePermission\")) sysmeta <- removeAccessRule(sysmeta, accessRules) # # Remove access rules form a DataObject. library(datapack) do <- new(\"DataObject\", file=system.file(\"./extdata/sample-data.csv\", package=\"datapack\"),                          format=\"text/csv\") do <- setPublicAccess(do) isPublic <- hasAccessRule(do, \"public\", \"read\") accessRules <- data.frame(subject=c(\"uid=smith,ou=Account,dc=example,dc=com\",                            \"uid=wiggens,o=unaffiliated,dc=example,dc=org\"),                            permission=c(\"write\", \"changePermission\"),                            stringsAsFactors=FALSE) do <- addAccessRule(do, accessRules) do <- removeAccessRule(do, \"uid=smith,ou=Account,dc=example,dc=com\", \"changePermission\") # hasAccessRule should return FALSE hasWrite <- hasAccessRule(do, \"smith\", \"write\")  # Alternatively, parameter \"y\" can be a data.frame containing one or more access rules: do <- addAccessRule(do, \"uid=smith,ou=Account,dc=example,dc=com\", \"write\") accessRules <- data.frame(subject=c(\"uid=smith,ou=Account,dc=example,dc=com\",    \"uid=slaughter,o=unaffiliated,dc=example,dc=org\"),    permission=c(\"write\", \"changePermission\")) sysmeta <- removeAccessRule(do, accessRules) #  # Remove access rules from a DataPackage. dp <- new(\"DataPackage\") data <- charToRaw(\"1,2,3\\n4,5,6\\n\") obj <- new(\"DataObject\", id=\"id1\", dataobj=data, format=\"text/csv\") dp <- addMember(dp, obj) data2 <- charToRaw(\"7,8,9\\n4,10,11\\n\") obj2 <- new(\"DataObject\", id=\"id2\", dataobj=data2, format=\"text/csv\") dp <- addMember(dp, obj2) # Add access rule to all package members dp <- addAccessRule(dp, \"uid=smith,ou=Account,dc=example,dc=com\", \"write\") dp <- addAccessRule(dp, \"uid=smith,ou=Account,dc=example,dc=com\", \"changePermission\" ) # Now take 'changePermission' away for user 'uid=smith...', specifying parameter 'y'  # as a character string containing a 'subject'. dp <- removeAccessRule(dp, \"uid=smith,ou=Account,dc=example,dc=com\", \"write\") dp <- removeAccessRule(dp, \"uid=smith,ou=Account,dc=example,dc=com\", \"changePermission\")  # Alternatively, parameter \"y\" can be a data.frame containing one or more access rules: # Add write, changePermission for uid=jones,... dp <- addAccessRule(dp, \"uid=jones,ou=Account,dc=example,dc=com\", \"write\") dp <- addAccessRule(dp, \"uid=jones,ou=Account,dc=example,dc=com\", \"changePermission\") # Now take privs for uid=jones,... away accessRules <- data.frame(subject=c(\"uid=jones,ou=Account,dc=example,dc=com\",                                       \"uid=jones,ou=Account,dc=example,dc=com\"),                                       permission=c(\"write\", \"changePermission\")) dp <- removeAccessRule(dp, accessRules)"},{"path":"https://docs.ropensci.org/datapack/reference/removeMember.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove the Specified Member from the Package — removeMember","title":"Remove the Specified Member from the Package — removeMember","text":"Given identifier DataObject DataPackage, delete DataObject DataPackage.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/removeMember.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove the Specified Member from the Package — removeMember","text":"","code":"removeMember(x, ...)  # S4 method for DataPackage removeMember(x, do, removeRelationships = FALSE)"},{"path":"https://docs.ropensci.org/datapack/reference/removeMember.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove the Specified Member from the Package — removeMember","text":"x DataPackage object ... (yet used) package member remove, either \"DataObject\" \"character\" (object identifier) removeRelationships logical value. TRUE, package relationships package member removed. Default FALSE.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/removeMember.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove the Specified Member from the Package — removeMember","text":"removeMember method removes specified DataObject DataPackage.  addition, package relationships included DataObject removed.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/removeMember.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove the Specified Member from the Package — removeMember","text":"","code":"dp <- new(\"DataPackage\") data <- charToRaw(\"1,2,3\\n4,5,6\") do <- new(\"DataObject\", id=\"myNewId\", dataobj=data, format=\"text/csv\", user=\"jsmith\") dp <- addMember(dp, do) # Remove the package member and any provenance relationships that reference it. removeMember(dp, \"myNewId\", removeRelationships=TRUE) #> This package does not contain any DataObjects."},{"path":"https://docs.ropensci.org/datapack/reference/removeRelationships.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove relationships of objects in a DataPackage — removeRelationships","title":"Remove relationships of objects in a DataPackage — removeRelationships","text":"Use function remove subset relationships previously added data package.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/removeRelationships.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove relationships of objects in a DataPackage — removeRelationships","text":"","code":"removeRelationships(x, ...)  # S4 method for DataPackage removeRelationships(x, subjectID = NA_character_, predicate = NA_character_)"},{"path":"https://docs.ropensci.org/datapack/reference/removeRelationships.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove relationships of objects in a DataPackage — removeRelationships","text":"x DataPackage object ... (Additional parameters) subjectID identifier subject relationships removed predicate identifier predicate relationships removed","code":""},{"path":"https://docs.ropensci.org/datapack/reference/removeRelationships.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove relationships of objects in a DataPackage — removeRelationships","text":"updated DataPackage object","code":""},{"path":"https://docs.ropensci.org/datapack/reference/removeRelationships.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove relationships of objects in a DataPackage — removeRelationships","text":"Remove relationship form \"subject -> predicate -> object\", defined Resource Description Framework (RDF), .e. RDF triple. neither subjectID predicate provided, relationships removed.  one provided, used select matching triples removed. Note: method updates passed-DataPackage object.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/removeRelationships.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove relationships of objects in a DataPackage — removeRelationships","text":"","code":"dp <- new(\"DataPackage\") # Create a relationship dp <- insertRelationship(dp, \"/Users/smith/scripts/genFields.R\",     \"https://knb.org/data_20030812.40.1\",     \"http://www.w3.org/ns/prov#used\") # Create a relationshp with the subject as a blank node with an automatically assigned blank  # node id dp <- insertRelationship(dp, subjectID=NA_character_, objectIDs=\"thing6\",      predicate=\"http://myns.org/wasThing\") # Create a relationshp with the subject as a blank node with a user assigned blank node id dp <- insertRelationship(dp, subjectID=\"urn:uuid:bc9e160e-ca21-47d5-871b-4a4820fe4451\",        objectIDs=\"thing7\", predicate=\"http://myns.org/hadThing\") # Create multiple relationships with the same subject, predicate, but different objects dp <- insertRelationship(dp, subjectID=\"https://myns.org/subject1\",        objectIDs=c(\"thing4\", \"thing5\"), predicate=\"http://myns.org/hadThing\") # Create multiple relationships with subject and object types specified dp <- insertRelationship(dp, subjectID=\"orcid.org/0000-0002-2192-403X\",      objectIDs=\"http://www.example.com/home\", predicate=\"http://myns.org/hadHome\",                    subjectType=\"uri\", objectType=\"literal\") nrow(getRelationships(dp))  #> [1] 6 dp <- removeRelationships(dp, predicate='http://myns.org/wasThing') nrow(getRelationships(dp))  #> [1] 5 dp <- removeRelationships(dp, subjectID='orcid.org/0000-0002-2192-403X') nrow(getRelationships(dp))  #> [1] 4 dp <- removeRelationships(dp, subjectID='https://myns.org/subject1',      predicate='http://myns.org/hadThing') nrow(getRelationships(dp))  #> [1] 2 dp <- removeRelationships(dp) nrow(getRelationships(dp))  #> [1] 0"},{"path":"https://docs.ropensci.org/datapack/reference/replaceMember.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace the raw data or file associated with a DataObject — replaceMember","title":"Replace the raw data or file associated with a DataObject — replaceMember","text":"DataObject container data can either R raw object file local disk. replaceMember method can used update date DataObject contains, DataObject member DataPackage,  substituting new file raw object specified DataObject.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/replaceMember.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace the raw data or file associated with a DataObject — replaceMember","text":"","code":"replaceMember(x, do, ...)  # S4 method for DataPackage replaceMember(   x,   do,   replacement,   formatId = NA_character_,   mediaType = NA_character_,   mediaTypeProperty = NA_character_,   newId = NA_character_,   ... )"},{"path":"https://docs.ropensci.org/datapack/reference/replaceMember.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace the raw data or file associated with a DataObject — replaceMember","text":"x DataPackage instance DataObject instance ... (yet used) replacement raw object character (filename) replace current value DataObject . formatId value type \"character\", DataONE object format object. mediaType value type \"character\", IANA Media Type (aka MIME-Type) object, e.g. \"text/csv\". mediaTypeProperty value type \"list\" \"character\", IANA Media Type properties \"mediaType\" argument. newId value type \"character\" replace identifier DataObject.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/replaceMember.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Replace the raw data or file associated with a DataObject — replaceMember","text":"data replacing existing DataObject data may different format type existing data. data type format may change, system metadata describes data can updated well. replaceMember method update SystemMetadata size, checksum values automatically,  update formatId, mediaType, mediaTypeProperty unless requested, specified call replaceMember necessary.  newId argument used, specified new identifier assigned  object, otherwise one generated necessary. new identifier used DataPackage uploaded DataONE, object updating existing object DataONE.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/replaceMember.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace the raw data or file associated with a DataObject — replaceMember","text":"","code":"# Create a DataObject and add it to the DataPackage dp <- new(\"DataPackage\") doIn <- new(\"DataObject\", format=\"text/csv\",              filename=system.file(\"./extdata/pkg-example/binary.csv\", package=\"datapack\")) dp <- addMember(dp, doIn)  # Use the zipped version of the file instead by updating the DataObject dp <- replaceMember(dp, doIn,            replacement=system.file(\"./extdata/pkg-example/binary.csv.zip\",            package=\"datapack\"),                     formatId=\"application/zip\")"},{"path":"https://docs.ropensci.org/datapack/reference/selectMember.html","id":null,"dir":"Reference","previous_headings":"","what":"Return identifiers for objects that match search criteria — selectMember","title":"Return identifiers for objects that match search criteria — selectMember","text":"Return DataObjects DataObject identifiers match search terms.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/selectMember.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return identifiers for objects that match search criteria — selectMember","text":"","code":"selectMember(x, ...)  # S4 method for DataPackage selectMember(x, name, value, as = \"character\")"},{"path":"https://docs.ropensci.org/datapack/reference/selectMember.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return identifiers for objects that match search criteria — selectMember","text":"x DataPackage instance ... (yet used) name name DataObject slot inspect, example \"sysmeta@formatId\". value character logical value match. specified character value, PERL style regular expressions can used (see ?grepl). character value specify return type, either \"DataObject\" \"character\" (default)","code":""},{"path":"https://docs.ropensci.org/datapack/reference/selectMember.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return identifiers for objects that match search criteria — selectMember","text":"list matching DataObjects DataObject identifiers. default return list  DataObject identifiers.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/selectMember.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return identifiers for objects that match search criteria — selectMember","text":"\"selectMember\" method inspects DataObject slot \"name\" match \"value\" DataObject DataPackage. Matching DataObjects returned list containing either package member identifiers (character) DataObjects , depending value parameter.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/selectMember.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return identifiers for objects that match search criteria — selectMember","text":"","code":"#' library(datapack) dp <- new(\"DataPackage\") # Add the script to the DataPackage progFile <- system.file(\"./extdata/pkg-example/logit-regression-example.R\", package=\"datapack\") # An 'id' parameter is not specified, so one will be generated automatically. progObj <- new(\"DataObject\", format=\"application/R\", filename=progFile) dp <- addMember(dp, progObj)  # Add a script input to the DataPackage inFile <- system.file(\"./extdata/pkg-example/binary.csv\", package=\"datapack\")  inObj <- new(\"DataObject\", format=\"text/csv\", filename=inFile) dp <- addMember(dp, inObj)  # Add a script output to the DataPackage outFile <- system.file(\"./extdata/pkg-example/gre-predicted.png\", package=\"datapack\") outObj <- new(\"DataObject\", format=\"image/png\", file=outFile) dp <- addMember(dp, outObj)  # Now determine the package member identifier for the R script progIds  <- selectMember(dp, name=\"sysmeta@formatId\", value=\"application/R\", as=\"character\") inputId <- selectMember(dp, name=\"sysmeta@fileName\", value=\"binary.csv\")"},{"path":"https://docs.ropensci.org/datapack/reference/serializePackage.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an OAI-ORE resource map from the package — serializePackage","title":"Create an OAI-ORE resource map from the package — serializePackage","text":"DataPackage serialized OAI-ORE resource map specified file.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/serializePackage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an OAI-ORE resource map from the package — serializePackage","text":"","code":"serializePackage(x, ...)  # S4 method for DataPackage serializePackage(   x,   file,   id = NA_character_,   syntaxName = \"rdfxml\",   mimeType = \"application/rdf+xml\",   namespaces = data.frame(namespace = character(), prefix = character(),     stringsAsFactors = FALSE),   syntaxURI = NA_character_,   resolveURI = NA_character_,   creator = NA_character_ )"},{"path":"https://docs.ropensci.org/datapack/reference/serializePackage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an OAI-ORE resource map from the package — serializePackage","text":"x DataPackage object ... Additional arguments file file ResourceMap serialized id unique identifier serialization. default value id assigned DataPackage created. syntaxName name syntax use serialization - default \"rdfxml\" mimeType mimetype serialized output - default \"application/rdf+xml\" namespaces data frame containing one namespaces associated prefix syntaxURI URI serialization syntax resolveURI character string containing URI prepend datapackage identifiers creator character string containing creator package.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/serializePackage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an OAI-ORE resource map from the package — serializePackage","text":"resource map created serialized default RDF/XML. serialization formats can specified using syntaxName mimeType parameters. available formats include: Note syntaxName mimeType arguments together specify o serialization format. Also, packages uploaded DataONE network, \"rdfxml\"  accepted format. resolveURI string value prepended DataPackage member identifiers resulting resource map.  resolveURI value specified, 'https://cn.dataone.org/cn/v1/resolve' used.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/serializePackage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an OAI-ORE resource map from the package — serializePackage","text":"","code":"dp <- new(\"DataPackage\") data <- charToRaw(\"1,2,3\\n4,5,6\") do <- new(\"DataObject\", id=\"do1\", dataobj=data, format=\"text/csv\", user=\"jsmith\") dp <- addMember(dp, do) data2 <- charToRaw(\"7,8,9\\n10,11,12\") do2 <- new(\"DataObject\", id=\"do2\", dataobj=data2, format=\"text/csv\", user=\"jsmith\") dp <- addMember(dp, do2) dp <- describeWorkflow(dp, sources=do, derivations=do2) if (FALSE) { td <- tempdir() status <- serializePackage(dp, file=paste(td, \"resmap.json\", sep=\"/\"), syntaxName=\"json\",       mimeType=\"application/json\") status <- serializePackage(dp, file=paste(td, \"resmap.xml\", sep=\"/\"), syntaxName=\"rdfxml\",      mimeType=\"application/rdf+xml\") status <- serializePackage(dp, file=paste(td, \"resmap.ttl\", sep=\"/\"), syntaxName=\"turtle\",      mimeType=\"text/turtle\") }"},{"path":"https://docs.ropensci.org/datapack/reference/serializeRDF.html","id":null,"dir":"Reference","previous_headings":"","what":"Serialize a ResouceMap. — serializeRDF","title":"Serialize a ResouceMap. — serializeRDF","text":"Redland RDF library used serialize ResourceMap RDF model file RDF/XML.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/serializeRDF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serialize a ResouceMap. — serializeRDF","text":"","code":"serializeRDF(x, ...)  # S4 method for ResourceMap serializeRDF(   x,   file,   syntaxName = \"rdfxml\",   mimeType = \"application/rdf+xml\",   namespaces = data.frame(namespace = character(), prefix = character(),     stringsAsFactors = FALSE),   syntaxURI = NA_character_ )"},{"path":"https://docs.ropensci.org/datapack/reference/serializeRDF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Serialize a ResouceMap. — serializeRDF","text":"x ResourceMap ... Additional parameters file file ResourceMap serialized syntaxName name syntax use serialization - default \"rdfxml\" mimeType mimetype serialized output - default \"application/rdf+xml\" namespaces data frame containing one namespaces associated prefix syntaxURI URI serialized syntax","code":""},{"path":"https://docs.ropensci.org/datapack/reference/serializeRDF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Serialize a ResouceMap. — serializeRDF","text":"status serialization (non)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/serializeRDF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Serialize a ResouceMap. — serializeRDF","text":"","code":"dp <- new(\"DataPackage\") data <- charToRaw(\"1,2,3\\n4,5,6\") do1 <- new(\"DataObject\", id=\"id1\", data, format=\"text/csv\") do2 <- new(\"DataObject\", id=\"id2\", data, format=\"text/csv\") dp <- addMember(dp, do1) dp <- addMember(dp, do2) dp <- insertRelationship(dp, subjectID=\"id1\", objectIDs=\"id2\",    predicate=\"http://www.w3.org/ns/prov#wasDerivedFrom\") relations <- getRelationships(dp) resmap <- new(\"ResourceMap\") resmap <- createFromTriples(resmap, relations, id=\"myuniqueid\") if (FALSE) { tf <- tempfile(fileext=\".xml\") serializeRDF(resmap, tf) }"},{"path":"https://docs.ropensci.org/datapack/reference/serializeSystemMetadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Serialize a SystemMetadata object to an XML representation — serializeSystemMetadata","title":"Serialize a SystemMetadata object to an XML representation — serializeSystemMetadata","text":"SystemMetadata object converted XML  written file.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/serializeSystemMetadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serialize a SystemMetadata object to an XML representation — serializeSystemMetadata","text":"","code":"serializeSystemMetadata(x, ...)  # S4 method for SystemMetadata serializeSystemMetadata(x, version = \"v1\", ...)"},{"path":"https://docs.ropensci.org/datapack/reference/serializeSystemMetadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Serialize a SystemMetadata object to an XML representation — serializeSystemMetadata","text":"x SystemMetadata instance serialized. ... (currently used) version character string representing DataONE API version system used (e.g. \"v1\", \"v2\").","code":""},{"path":"https://docs.ropensci.org/datapack/reference/serializeSystemMetadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Serialize a SystemMetadata object to an XML representation — serializeSystemMetadata","text":"character value filename XML representation SystemMetadata object written . character string representing SystemMetadata object","code":""},{"path":"https://docs.ropensci.org/datapack/reference/serializeSystemMetadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Serialize a SystemMetadata object to an XML representation — serializeSystemMetadata","text":"'version' parameter specified *v2* SystemMetadata object serialized according DataONE version 2.0 system metadata format.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/serializeSystemMetadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Serialize a SystemMetadata object to an XML representation — serializeSystemMetadata","text":"","code":"library(XML) doc <- xmlParseDoc(system.file(\"testfiles/sysmeta.xml\", package=\"datapack\"), asText=FALSE) sysmeta <- new(\"SystemMetadata\") sysmeta <- parseSystemMetadata(sysmeta, xmlRoot(doc)) sysmetaXML <- serializeSystemMetadata(sysmeta, version=\"v2\")"},{"path":"https://docs.ropensci.org/datapack/reference/serializeToBagIt.html","id":null,"dir":"Reference","previous_headings":"","what":"Serialize A DataPackage into a BagIt Archive File — serializeToBagIt","title":"Serialize A DataPackage into a BagIt Archive File — serializeToBagIt","text":"BagIt packaging format https://tools.ietf.org/html/draft-kunze-bagit-08     used prepare archive file contains contents DataPackage.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/serializeToBagIt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serialize A DataPackage into a BagIt Archive File — serializeToBagIt","text":"","code":"serializeToBagIt(x, ...)  # S4 method for DataPackage serializeToBagIt(   x,   mapId = NA_character_,   syntaxName = NA_character_,   namespaces = data.frame(),   mimeType = NA_character_,   syntaxURI = NA_character_,   resolveURI = NA_character_,   creator = NA_character_,   ... )"},{"path":"https://docs.ropensci.org/datapack/reference/serializeToBagIt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Serialize A DataPackage into a BagIt Archive File — serializeToBagIt","text":"x DataPackage object ... Additional arguments mapId unique identifier package resource map. specified, one automatically generated. syntaxName name syntax use resource map serialization, defaults \"rdfxml\" namespaces optional data frame containing one namespaces associated prefix resource map serialization. mimeType mimetype resource map serialization, defaults \"application/rdf+xml\". syntaxURI optional string specifying URI resource map serialization. resolveURI character string containing URI prepend datapackage identifiers resource map. creator character string containing creator package.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/serializeToBagIt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Serialize A DataPackage into a BagIt Archive File — serializeToBagIt","text":"file name contains BagIt zip archive. Recursively determines name science metadata object. base file name (eml, datacite, science-metadata, etc) stay . Call method base name number existing files start . likely 0. count defined, add end file () call method count += 1 Eventually free file name found, function returns name","code":""},{"path":"https://docs.ropensci.org/datapack/reference/serializeToBagIt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Serialize A DataPackage into a BagIt Archive File — serializeToBagIt","text":"BagIt Archive File created copying member DataPackage, preparing     files describe files archive, including information size files     checksum file. OAI-ORE resource map automatically created added     archive. metadata files data files packaged     single zip file.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/serializeToBagIt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Serialize A DataPackage into a BagIt Archive File — serializeToBagIt","text":"","code":"# Create the first data object dp <- new(\"DataPackage\") data <- charToRaw(\"1,2,3,5,6\") do <- new(\"DataObject\", id=\"do1\", dataobj=data, format=\"text/csv\", user=\"jsmith\") dp <- addMember(dp, do) # Create a second data object data2 <- charToRaw(\"7,8,9,4,10,11\") do2 <- new(\"DataObject\", id=\"do2\", dataobj=data2, format=\"text/csv\", user=\"jsmith\") dp <- addMember(dp, do2) # Create a relationship between the two data objects dp <- describeWorkflow(dp, sources=\"do2\", derivations=\"do2\") # Write out the data package to a BagIt file if (FALSE) { bagitFile <- serializeToBagIt(dp, syntaxName=\"json\", mimeType=\"application/json\") }"},{"path":"https://docs.ropensci.org/datapack/reference/setPublicAccess.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a Rule to the AccessPolicy to make the object publicly readable. — setPublicAccess","title":"Add a Rule to the AccessPolicy to make the object publicly readable. — setPublicAccess","text":"called prior creating object DataONE.  called  creating object, adds rule access policy makes object publicly readable.  called creation, change system metadata locally, effect remotely uploaded copies DataObject.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/setPublicAccess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a Rule to the AccessPolicy to make the object publicly readable. — setPublicAccess","text":"","code":"setPublicAccess(x, ...)  # S4 method for DataObject setPublicAccess(x)  # S4 method for DataPackage setPublicAccess(x, identifiers = list())"},{"path":"https://docs.ropensci.org/datapack/reference/setPublicAccess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a Rule to the AccessPolicy to make the object publicly readable. — setPublicAccess","text":"x DataObject ... (yet used) identifiers list character values containing package member identifiers updated (default package members).","code":""},{"path":"https://docs.ropensci.org/datapack/reference/setPublicAccess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a Rule to the AccessPolicy to make the object publicly readable. — setPublicAccess","text":"DataObject modified access rules. DataPackage modified access rules.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/setPublicAccess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a Rule to the AccessPolicy to make the object publicly readable. — setPublicAccess","text":"","code":"data <- charToRaw(\"1,2,3\\n4,5,6\\n\") do <- new(\"DataObject\", \"id1\", dataobj=data, \"text/csv\",    \"uid=jones,DC=example,DC=com\", \"urn:node:KNB\") do <- setPublicAccess(do) # First create a sample package with two DataObjects dp <- new(\"DataPackage\") data <- charToRaw(\"1,2,3\\n4,5,6\\n\") obj <- new(\"DataObject\", id=\"id1\", dataobj=data, format=\"text/csv\") dp <- addMember(dp, obj) data2 <- charToRaw(\"7,8,9\\n4,10,11\\n\") obj2 <- new(\"DataObject\", id=\"id2\", dataobj=data2, format=\"text/csv\") dp <- addMember(dp, obj2) # Now add public read to all package members (\"id1\", \"id2\") dp <- setPublicAccess(dp)"},{"path":"https://docs.ropensci.org/datapack/reference/setValue.html","id":null,"dir":"Reference","previous_headings":"","what":"Set values for selected DataPackage members. — setValue","title":"Set values for selected DataPackage members. — setValue","text":"'setValue' method used modify values stored DataPackage members. member DataPackage DataObject R S4 object contains set values (slots). available slots described help(\"DataObject-class\").","code":""},{"path":"https://docs.ropensci.org/datapack/reference/setValue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set values for selected DataPackage members. — setValue","text":"","code":"setValue(x, ...)  # S4 method for DataPackage setValue(x, name, value, identifiers = NA_character_, ...)"},{"path":"https://docs.ropensci.org/datapack/reference/setValue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set values for selected DataPackage members. — setValue","text":"x DataPackage instance ... (yet used) name DataObject slot name. value new value assign slot selected DataPackage members. identifiers list identifiers DataPackage members update.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/setValue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set values for selected DataPackage members. — setValue","text":"DataPackage possibly updated DataObjects.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/setValue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set values for selected DataPackage members. — setValue","text":"parameter identifiers provided, DataPackage members identifiers specified list updated. parameter provided members updated. update members package, specify value identifiers=getIdentifiers(pkg) pkg variable name DataPackage update. Note method can used update data filenane slots, instead recommended us replaceMember method achieve , replaceMember method assists  properly setting related SystemMetadata values.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/setValue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set values for selected DataPackage members. — setValue","text":"","code":"# First create a package that we can modify.  dp <- new(\"DataPackage\") data <- charToRaw(\"1,2,3\\n4,5,6\") # The next statment sets the format type incorrectly as an example, so we can correct it later do <- new(\"DataObject\", id=\"myNewId\", dataobj=data, format=\"image/jpg\", user=\"jsmith\") dp <- addMember(dp, do) data <- charToRaw(\"7,8.9\\n4,10,11\") # This next statement also sets the format type incorrectly do <- new(\"DataObject\", id=\"myNewId2\", dataobj=data, format=\"image/jpg\", user=\"jsmith\") dp <- addMember(dp, do) # Change format types to correct value for both package members # Careful! Specifying 'identifiers=getIdentifiers(dp) will update all package members! dp <- setValue(dp, name=\"sysmeta@formatId\", value=\"text/csv\", identifiers=getIdentifiers(dp))"},{"path":"https://docs.ropensci.org/datapack/reference/updateMetadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Update selected elements of the XML content of a DataObject in a DataPackage (aka package member). — updateMetadata","title":"Update selected elements of the XML content of a DataObject in a DataPackage (aka package member). — updateMetadata","text":"DataObject contains XML document can edited specifying path elements edit (XPath expression) value replace text node.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/updateMetadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update selected elements of the XML content of a DataObject in a DataPackage (aka package member). — updateMetadata","text":"","code":"updateMetadata(x, do, ...)  # S4 method for DataPackage updateMetadata(x, do, xpath, replacement, newId = NA_character_, ...)"},{"path":"https://docs.ropensci.org/datapack/reference/updateMetadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update selected elements of the XML content of a DataObject in a DataPackage (aka package member). — updateMetadata","text":"x DataPackage instance DataObject instance object, DataObject identifier ... (yet used) xpath character value specifying location XML update. replacement character value replace elements found xpath. newId value type \"character\" replace identifier DataObject.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/updateMetadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update selected elements of the XML content of a DataObject in a DataPackage (aka package member). — updateMetadata","text":"method requires knowledge structure metadata document well facility XPath language. newId argument used, specified new  identifier assigned object, previous identifier stored oldId slot,  possible use updating DataObject repository. newId used, new identifier generated DataObject first time updateMetadata called particular object DataPackage.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/updateMetadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update selected elements of the XML content of a DataObject in a DataPackage (aka package member). — updateMetadata","text":"","code":"# Create a DataObject and add it to the DataPackage dp <- new(\"DataPackage\") sampleMeta <- system.file(\"./extdata/sample-eml.xml\", package=\"datapack\") id <- \"1234\" metaObj <- new(\"DataObject\", id=\"1234\", format=\"eml://ecoinformatics.org/eml-2.1.1\",                  file=sampleMeta) dp <- addMember(dp, metaObj)  # In the metadata object, insert the newly assigned data  xp <- sprintf(\"//dataTable/physical/distribution[../objectName/text()=\\\"%s\\\"]/online/url\",                \"sample-data.csv\")  newURL <- sprintf(\"https://cn.dataone.org/cn/v2/resolve/%s\", \"1234\") dp <- updateMetadata(dp, id, xpath=xp, replacement=newURL)"},{"path":"https://docs.ropensci.org/datapack/reference/updateRelationships.html","id":null,"dir":"Reference","previous_headings":"","what":"Update package relationships by replacing an old identifier with a new one. — updateRelationships","title":"Update package relationships by replacing an old identifier with a new one. — updateRelationships","text":"package members updated, receive new identifier (replaceMember). therefor necessary update package relationships update occurrences old identifier new one old identifier appears \"subject\" \"object\"  relationship.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/updateRelationships.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update package relationships by replacing an old identifier with a new one. — updateRelationships","text":"","code":"updateRelationships(x, ...)  # S4 method for DataPackage updateRelationships(x, id, newId, ...)"},{"path":"https://docs.ropensci.org/datapack/reference/updateRelationships.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update package relationships by replacing an old identifier with a new one. — updateRelationships","text":"x DataPackage object ... (yet used) id character value containing identifier replaced. newId character value containing identifier replace old identifier.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/updateXML.html","id":null,"dir":"Reference","previous_headings":"","what":"Update selected elements of the XML content of a DataObject — updateXML","title":"Update selected elements of the XML content of a DataObject — updateXML","text":"data content DataObject updated using xpath  argument locate elements update character value specified  replacement argument.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/updateXML.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update selected elements of the XML content of a DataObject — updateXML","text":"","code":"updateXML(x, ...)  # S4 method for DataObject updateXML(x, xpath = NA_character_, replacement = NA_character_, ...)"},{"path":"https://docs.ropensci.org/datapack/reference/updateXML.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update selected elements of the XML content of a DataObject — updateXML","text":"x DataObject instance ... Additional parameters (yet used) xpath character value specifying location XML update. replacement character value replace elements found xpath.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/updateXML.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update selected elements of the XML content of a DataObject — updateXML","text":"modified DataObject","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/updateXML.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update selected elements of the XML content of a DataObject — updateXML","text":"","code":"if (FALSE) { library(datapack) dataObj <- new(\"DataObject\", format=\"text/csv\", file=sampleData) sampleEML <- system.file(\"extdata/sample-eml.xml\", package=\"datapack\") dataObj <- updateMetadata(dataObj, xpath=\"\", replacement=) } library(datapack) # Create the metadata object with a sample EML file sampleMeta <- system.file(\"./extdata/sample-eml.xml\", package=\"datapack\") metaObj <- new(\"DataObject\", format=\"eml://ecoinformatics.org/eml-2.1.1\", file=sampleMeta) # In the metadata object, replace \"sample-data.csv\" with 'sample-data.csv.zip' xp <- sprintf(\"//dataTable/physical/objectName[text()=\\\"%s\\\"]\", \"sample-data.csv\") metaObj <- updateXML(metaObj, xpath=xp, replacement=\"sample-data.csv.zip\")"},{"path":"https://docs.ropensci.org/datapack/reference/validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a SystemMetadata object. — validate","title":"Validate a SystemMetadata object. — validate","text":"Validate system metadata object, ensuring required fields present right type.","code":""},{"path":"https://docs.ropensci.org/datapack/reference/validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a SystemMetadata object. — validate","text":"","code":"validate(x, ...)  # S4 method for SystemMetadata validate(x, ...)"},{"path":"https://docs.ropensci.org/datapack/reference/validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a SystemMetadata object. — validate","text":"x instance validated ... (Additional parameters)","code":""},{"path":"https://docs.ropensci.org/datapack/reference/validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a SystemMetadata object. — validate","text":"logical, TRUE SystemMetadata object valid, else list strings detailing errors","code":""},{"path":[]},{"path":"https://docs.ropensci.org/datapack/reference/validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate a SystemMetadata object. — validate","text":"","code":"library(XML) doc <- xmlParseDoc(system.file(\"testfiles/sysmeta.xml\", package=\"datapack\"), asText=FALSE) sysmeta <- new(\"SystemMetadata\") sysmeta <- parseSystemMetadata(sysmeta, xmlRoot(doc)) valid <- validate(sysmeta)"}]
